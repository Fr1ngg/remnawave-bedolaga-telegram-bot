export interface BroadcastItem { id: number; target_type: string; message_text: string; has_media: boolean; media_type?: string | null; media_file_id?: string | null; media_caption?: string | null; total_count: number; sent_count: number; failed_count: number; status: string; admin_name?: string | null; created_at: string; completed_at?: string | null; }
export interface BroadcastListResponse { items: BroadcastItem[]; total: number; limit: number; offset: number; }
export interface BroadcastCreatePayload { target: string; message_text: string; selected_buttons?: string[]; media?: { type: "photo" | "video" | "document"; file_id: string; caption?: string | null } | null }
import { apiClient } from "@/lib/api-client";
export async function fetchBroadcasts(params: { limit?: number; offset?: number } = {}): Promise<BroadcastListResponse> { const { data } = await apiClient.get<BroadcastListResponse>("/broadcasts", { params: { limit: params.limit ?? 50, offset: params.offset ?? 0 } }); return data; }
export async function createBroadcast(payload: BroadcastCreatePayload): Promise<BroadcastItem> { const { data } = await apiClient.post<BroadcastItem>("/broadcasts", payload); return data; }
export async function stopBroadcast(id: number): Promise<BroadcastItem> { const { data } = await apiClient.post<BroadcastItem>(`/broadcasts/${id}/stop`); return data; }
export interface BroadcastUploadResponse { file_id: string; type: "photo" | "video" | "document"; caption?: string | null; preview_url?: string }
export async function uploadBroadcastMedia(file: File, type: "photo" | "video" | "document", caption?: string | null): Promise<BroadcastUploadResponse> { const form = new FormData(); form.append("media_type", type); form.append("file", file); if (caption) form.append("caption", caption); const { data } = await apiClient.post<BroadcastUploadResponse>("/broadcasts/media/upload", form, { headers: { "Content-Type": "multipart/form-data" } }); return data; }
