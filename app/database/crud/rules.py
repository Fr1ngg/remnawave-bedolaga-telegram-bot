import logging
from typing import Optional
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime

from app.database.models import ServiceRule

logger = logging.getLogger(__name__)


async def get_rules_by_language(db: AsyncSession, language: str = "ru") -> Optional[ServiceRule]:
    result = await db.execute(
        select(ServiceRule)
        .where(
            ServiceRule.language == language,
            ServiceRule.is_active == True
        )
        .order_by(ServiceRule.order, ServiceRule.created_at.desc())
        .limit(1)
    )
    return result.scalar_one_or_none()


async def create_or_update_rules(
    db: AsyncSession,
    content: str,
    language: str = "ru",
    title: str = "–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞"
) -> ServiceRule:
    
    existing_rules_result = await db.execute(
        select(ServiceRule).where(
            ServiceRule.language == language,
            ServiceRule.is_active == True
        )
    )
    existing_rules = existing_rules_result.scalars().all()
    
    for rule in existing_rules:
        rule.is_active = False
        rule.updated_at = datetime.utcnow()
    
    new_rules = ServiceRule(
        title=title,
        content=content,
        language=language,
        is_active=True,
        order=0
    )
    
    db.add(new_rules)
    await db.commit()
    await db.refresh(new_rules)
    
    logger.info(f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —è–∑—ã–∫–∞ {language} –æ–±–Ω–æ–≤–ª–µ–Ω—ã (ID: {new_rules.id})")
    return new_rules


async def clear_all_rules(db: AsyncSession, language: str = "ru") -> bool:
    try:
        result = await db.execute(
            update(ServiceRule)
            .where(
                ServiceRule.language == language,
                ServiceRule.is_active == True
            )
            .values(
                is_active=False,
                updated_at=datetime.utcnow()
            )
        )
        
        await db.commit()
        
        rows_affected = result.rowcount
        logger.info(f"‚úÖ –û—á–∏—â–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —è–∑—ã–∫–∞ {language}. –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {rows_affected}")
        
        return rows_affected > 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è —è–∑—ã–∫–∞ {language}: {e}")
        await db.rollback()
        raise


async def get_current_rules_content(db: AsyncSession, language: str = "ru") -> str:
    rules = await get_rules_by_language(db, language)
    
    if rules:
        return rules.content
    else:
        return """
üîí <b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞</b>

1. –°–µ—Ä–≤–∏—Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è "–∫–∞–∫ –µ—Å—Ç—å" –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≥–∞—Ä–∞–Ω—Ç–∏–π.

2. –ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.

3. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª.

4. –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞.

5. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å–µ—Ç –ø–æ–ª–Ω—É—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.

6. –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.

–ò—Å–ø–æ–ª—å–∑—É—è —Å–µ—Ä–≤–∏—Å, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏.
"""


async def get_all_rules_versions(
    db: AsyncSession, 
    language: str = "ru", 
    limit: int = 10
) -> list[ServiceRule]:
    result = await db.execute(
        select(ServiceRule)
        .where(ServiceRule.language == language)
        .order_by(ServiceRule.created_at.desc())
        .limit(limit)
    )
    return result.scalars().all()


async def restore_rules_version(
    db: AsyncSession, 
    rule_id: int, 
    language: str = "ru"
) -> Optional[ServiceRule]:
    try:
        result = await db.execute(
            select(ServiceRule).where(
                ServiceRule.id == rule_id,
                ServiceRule.language == language
            )
        )
        rule_to_restore = result.scalar_one_or_none()
        
        if not rule_to_restore:
            logger.warning(f"–ü—Ä–∞–≤–∏–ª–æ —Å ID {rule_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —è–∑—ã–∫–∞ {language}")
            return None
        
        await db.execute(
            update(ServiceRule)
            .where(
                ServiceRule.language == language,
                ServiceRule.is_active == True
            )
            .values(
                is_active=False,
                updated_at=datetime.utcnow()
            )
        )
        
        restored_rule = ServiceRule(
            title=rule_to_restore.title,
            content=rule_to_restore.content,
            language=language,
            is_active=True,
            order=0
        )
        
        db.add(restored_rule)
        await db.commit()
        await db.refresh(restored_rule)
        
        logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –ø—Ä–∞–≤–∏–ª ID {rule_id} –∫–∞–∫ –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ ID {restored_rule.id}")
        return restored_rule
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª ID {rule_id}: {e}")
        await db.rollback()
        raise


async def get_rules_statistics(db: AsyncSession) -> dict:
    try:
        active_result = await db.execute(
            select(ServiceRule).where(ServiceRule.is_active == True)
        )
        active_rules = active_result.scalars().all()
        
        all_result = await db.execute(select(ServiceRule))
        all_rules = all_result.scalars().all()
        
        languages_stats = {}
        for rule in active_rules:
            lang = rule.language
            if lang not in languages_stats:
                languages_stats[lang] = {
                    'active_count': 0,
                    'last_updated': None,
                    'content_length': 0
                }
            
            languages_stats[lang]['active_count'] += 1
            languages_stats[lang]['content_length'] = len(rule.content)
            
            if not languages_stats[lang]['last_updated'] or rule.updated_at > languages_stats[lang]['last_updated']:
                languages_stats[lang]['last_updated'] = rule.updated_at
        
        return {
            'total_active': len(active_rules),
            'total_all_time': len(all_rules),
            'languages': languages_stats,
            'total_languages': len(languages_stats)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∞–≤–∏–ª: {e}")
        return {
            'total_active': 0,
            'total_all_time': 0,
            'languages': {},
            'total_languages': 0,
            'error': str(e)
        }
