import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.keyboards.inline import get_back_keyboard
from app.localization.texts import get_texts
from app.services.payment_service import PaymentService
from app.utils.decorators import error_handler
from app.states import BalanceStates

logger = logging.getLogger(__name__)


@error_handler
async def start_yookassa_payment(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    texts = get_texts(db_user.language)
    
    if not settings.is_yookassa_enabled():
        await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ YooKassa –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    min_amount_rub = settings.YOOKASSA_MIN_AMOUNT_KOPEKS / 100
    max_amount_rub = settings.YOOKASSA_MAX_AMOUNT_KOPEKS / 100
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if settings.YOOKASSA_QUICK_AMOUNT_SELECTION_ENABLED and not settings.DISABLE_TOPUP_BUTTONS:
        message_text = (
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é —Å—É–º–º—É "
            f"–æ—Ç {min_amount_rub:.0f} –¥–æ {max_amount_rub:,.0f} —Ä—É–±–ª–µ–π:"
        )
    else:
        message_text = (
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {min_amount_rub:.0f} –¥–æ {max_amount_rub:,.0f} —Ä—É–±–ª–µ–π:"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_back_keyboard(db_user.language)
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —Å—É–º–º—ã –∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    if settings.YOOKASSA_QUICK_AMOUNT_SELECTION_ENABLED and not settings.DISABLE_TOPUP_BUTTONS:
        from .main import get_quick_amount_buttons
        quick_amount_buttons = get_quick_amount_buttons(db_user.language)
        if quick_amount_buttons:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard.inline_keyboard = quick_amount_buttons + keyboard.inline_keyboard
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(BalanceStates.waiting_for_amount)
    await state.update_data(payment_method="yookassa")
    await callback.answer()


@error_handler
async def start_yookassa_sbp_payment(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext
):
    texts = get_texts(db_user.language)
    
    if not settings.is_yookassa_enabled() or not settings.YOOKASSA_SBP_ENABLED:
        await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    min_amount_rub = settings.YOOKASSA_MIN_AMOUNT_KOPEKS / 100
    max_amount_rub = settings.YOOKASSA_MAX_AMOUNT_KOPEKS / 100
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if settings.YOOKASSA_QUICK_AMOUNT_SELECTION_ENABLED and not settings.DISABLE_TOPUP_BUTTONS:
        message_text = (
            f"üè¶ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é —Å—É–º–º—É "
            f"–æ—Ç {min_amount_rub:.0f} –¥–æ {max_amount_rub:,.0f} —Ä—É–±–ª–µ–π:"
        )
    else:
        message_text = (
            f"üè¶ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç {min_amount_rub:.0f} –¥–æ {max_amount_rub:,.0f} —Ä—É–±–ª–µ–π:"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_back_keyboard(db_user.language)
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –±—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —Å—É–º–º—ã –∏ –Ω–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    if settings.YOOKASSA_QUICK_AMOUNT_SELECTION_ENABLED and not settings.DISABLE_TOPUP_BUTTONS:
        from .main import get_quick_amount_buttons
        quick_amount_buttons = get_quick_amount_buttons(db_user.language)
        if quick_amount_buttons:
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            keyboard.inline_keyboard = quick_amount_buttons + keyboard.inline_keyboard
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(BalanceStates.waiting_for_amount)
    await state.update_data(payment_method="yookassa_sbp")
    await callback.answer()


@error_handler
async def process_yookassa_payment_amount(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    amount_kopeks: int,
    state: FSMContext
):
    texts = get_texts(db_user.language)
    
    if not settings.is_yookassa_enabled():
        await message.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooKassa –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    if amount_kopeks < settings.YOOKASSA_MIN_AMOUNT_KOPEKS:
        min_rubles = settings.YOOKASSA_MIN_AMOUNT_KOPEKS / 100
        await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π: {min_rubles:.0f} ‚ÇΩ")
        return
    
    if amount_kopeks > settings.YOOKASSA_MAX_AMOUNT_KOPEKS:
        max_rubles = settings.YOOKASSA_MAX_AMOUNT_KOPEKS / 100
        await message.answer(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π: {max_rubles:,.0f} ‚ÇΩ".replace(',', ' '))
        return
    
    try:
        payment_service = PaymentService(message.bot)
        
        payment_result = await payment_service.create_yookassa_payment(
            db=db,
            user_id=db_user.id,
            amount_kopeks=amount_kopeks,
            description=settings.get_balance_payment_description(amount_kopeks),
            receipt_email=None,
            receipt_phone=None,
            metadata={
                "user_telegram_id": str(db_user.telegram_id),
                "user_username": db_user.username or "",
                "purpose": "balance_topup"
            }
        )
        
        if not payment_result:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            await state.clear()
            return
        
        confirmation_url = payment_result.get("confirmation_url")
        if not confirmation_url:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            await state.clear()
            return
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π", url=confirmation_url)],
            [types.InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_yookassa_{payment_result['local_payment_id']}")],
            [types.InlineKeyboardButton(text=texts.BACK, callback_data="balance_topup")]
        ])
        
        await message.answer(
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {settings.format_price(amount_kopeks)}\n"
            f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_result['yookassa_payment_id'][:8]}...\n\n"
            f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
            f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π'\n"
            f"2. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã\n"
            f"3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂\n"
            f"4. –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            f"üîí –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É YooKassa\n"
            f"‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç—ã: Visa, MasterCard, –ú–ò–†\n\n"
            f"‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ {settings.get_support_contact_display_html()}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        await state.clear()
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ YooKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user.telegram_id}: "
                   f"{amount_kopeks//100}‚ÇΩ, ID: {payment_result['yookassa_payment_id']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è YooKassa –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await state.clear()


@error_handler
async def process_yookassa_sbp_payment_amount(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    amount_kopeks: int,
    state: FSMContext
):
    texts = get_texts(db_user.language)
    
    if not settings.is_yookassa_enabled() or not settings.YOOKASSA_SBP_ENABLED:
        await message.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    if amount_kopeks < settings.YOOKASSA_MIN_AMOUNT_KOPEKS:
        min_rubles = settings.YOOKASSA_MIN_AMOUNT_KOPEKS / 100
        await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü: {min_rubles:.0f} ‚ÇΩ")
        return
    
    if amount_kopeks > settings.YOOKASSA_MAX_AMOUNT_KOPEKS:
        max_rubles = settings.YOOKASSA_MAX_AMOUNT_KOPEKS / 100
        await message.answer(f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü: {max_rubles:,.0f} ‚ÇΩ".replace(',', ' '))
        return
    
    try:
        payment_service = PaymentService(message.bot)
        
        payment_result = await payment_service.create_yookassa_sbp_payment(
            db=db,
            user_id=db_user.id,
            amount_kopeks=amount_kopeks,
            description=settings.get_balance_payment_description(amount_kopeks),
            receipt_email=None,
            receipt_phone=None,
            metadata={
                "user_telegram_id": str(db_user.telegram_id),
                "user_username": db_user.username or "",
                "purpose": "balance_topup_sbp"
            }
        )
        
        if not payment_result:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –°–ë–ü. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            await state.clear()
            return
        
        confirmation_url = payment_result.get("confirmation_url")
        qr_confirmation_data = payment_result.get("qr_confirmation_data")
        
        if not confirmation_url and not qr_confirmation_data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –°–ë–ü. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            await state.clear()
            return
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º QR-–∫–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        qr_photo = None
        if qr_confirmation_data:
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
                import base64
                from io import BytesIO
                import qrcode
                from aiogram.types import BufferedInputFile
                
                # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                qr = qrcode.QRCode(version=1, box_size=10, border=5)
                qr.add_data(qr_confirmation_data)
                qr.make(fit=True)
                
                img = qr.make_image(fill_color="black", back_color="white")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
                img_bytes = BytesIO()
                img.save(img_bytes, format='PNG')
                img_bytes.seek(0)
                
                qr_photo = BufferedInputFile(img_bytes.getvalue(), filename="qrcode.png")
            except ImportError:
                logger.warning("qrcode –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, QR-–∫–æ–¥ –Ω–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ—Ç QR-–¥–∞–Ω–Ω—ã—Ö –∏–∑ YooKassa, –Ω–æ –µ—Å—Ç—å URL, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –∏–∑ URL
        if not qr_photo and confirmation_url:
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
                import base64
                from io import BytesIO
                import qrcode
                from aiogram.types import BufferedInputFile
                
                # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ –∏–∑ URL
                qr = qrcode.QRCode(version=1, box_size=10, border=5)
                qr.add_data(confirmation_url)
                qr.make(fit=True)
                
                img = qr.make_image(fill_color="black", back_color="white")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
                img_bytes = BytesIO()
                img.save(img_bytes, format='PNG')
                img_bytes.seek(0)
                
                qr_photo = BufferedInputFile(img_bytes.getvalue(), filename="qrcode.png")
            except ImportError:
                logger.warning("qrcode –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, QR-–∫–æ–¥ –Ω–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –∏–∑ URL: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        keyboard_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å—Å—ã–ª–∫–∞
        if confirmation_url:
            keyboard_buttons.append([types.InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=confirmation_url)])
        else:
            # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞
            keyboard_buttons.append([types.InlineKeyboardButton(text="üì± –û–ø–ª–∞—Ç–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞", callback_data="temp_disabled")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        keyboard_buttons.append([types.InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_yookassa_{payment_result['local_payment_id']}")])
        keyboard_buttons.append([types.InlineKeyboardButton(text=texts.BACK, callback_data="balance_topup")])
        
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"üîó <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {settings.format_price(amount_kopeks)}\n"
            f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_result['yookassa_payment_id'][:8]}...\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        if not confirmation_url:
            message_text += (
                f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:</b>\n"
                f"1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞\n"
                f"2. –ù–∞–π–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –æ–ø–ª–∞—Ç—ã –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –°–ë–ü\n"
                f"3. –í–≤–µ–¥–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞: <code>{payment_result['yookassa_payment_id']}</code>\n"
                f"4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞\n"
                f"5. –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            )
        
        message_text += (
            f"üîí –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É YooKassa\n"
            f"‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –°–ë–ü –æ—Ç –≤—Å–µ—Ö –±–∞–Ω–∫–æ–≤-—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
            f"‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ {settings.get_support_contact_display_html()}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        # –ï—Å–ª–∏ –µ—Å—Ç—å QR-–∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ
        if qr_photo:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –∏–ª–∏ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            await message.answer_photo(
                photo=qr_photo,
                caption=message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        else:
            # –ï—Å–ª–∏ QR-–∫–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        
        logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ YooKassa –°–ë–ü –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user.telegram_id}: "
                   f"{amount_kopeks//100}‚ÇΩ, ID: {payment_result['yookassa_payment_id']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è YooKassa –°–ë–ü –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –°–ë–ü. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await state.clear()





@error_handler
async def check_yookassa_payment_status(
    callback: types.CallbackQuery,
    db: AsyncSession
):
    try:
        local_payment_id = int(callback.data.split('_')[-1])
        
        from app.database.crud.yookassa import get_yookassa_payment_by_local_id
        payment = await get_yookassa_payment_by_local_id(db, local_payment_id)
        
        if not payment:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        status_emoji = {
            "pending": "‚è≥",
            "waiting_for_capture": "‚åõ",
            "succeeded": "‚úÖ",
            "canceled": "‚ùå",
            "failed": "‚ùå"
        }
        
        status_text = {
            "pending": "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            "waiting_for_capture": "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            "succeeded": "–û–ø–ª–∞—á–µ–Ω",
            "canceled": "–û—Ç–º–µ–Ω–µ–Ω",
            "failed": "–û—à–∏–±–∫–∞"
        }
        
        emoji = status_emoji.get(payment.status, "‚ùì")
        status = status_text.get(payment.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        message_text = (f"üí≥ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:\n\n"
                       f"üÜî ID: {payment.yookassa_payment_id[:8]}...\n"
                       f"üí∞ –°—É–º–º–∞: {settings.format_price(payment.amount_kopeks)}\n"
                       f"üìä –°—Ç–∞—Ç—É—Å: {emoji} {status}\n"
                       f"üìÖ –°–æ–∑–¥–∞–Ω: {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n")
        
        if payment.is_succeeded:
            message_text += "\n‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å."
        elif payment.is_pending:
            message_text += "\n‚è≥ –ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –≤—ã—à–µ."
        elif payment.is_failed:
            message_text += (
                f"\n‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ {settings.get_support_contact_display()}"
            )
        
        await callback.answer(message_text, show_alert=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)