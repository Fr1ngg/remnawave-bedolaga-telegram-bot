import logging
from typing import Dict

from aiogram import types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.keyboards.inline import get_back_keyboard
from app.localization.texts import get_texts
from app.services.payment_service import PaymentService, get_user_by_id as fetch_user_by_id
from app.states import BalanceStates
from app.utils.decorators import error_handler

logger = logging.getLogger(__name__)


@error_handler
async def start_wata_payment(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
):
    texts = get_texts(db_user.language)

    if not settings.is_wata_enabled():
        await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ WATA –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    message_text = texts.t(
        "WATA_TOPUP_PROMPT",
        (
            "üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ WATA</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî {min_amount}, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è ‚Äî {max_amount}.\n"
            "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Ñ–æ—Ä–º—É WATA."
        ),
    ).format(
        min_amount=settings.format_price(settings.WATA_MIN_AMOUNT_KOPEKS),
        max_amount=settings.format_price(settings.WATA_MAX_AMOUNT_KOPEKS),
    )

    keyboard = get_back_keyboard(db_user.language)

    if settings.YOOKASSA_QUICK_AMOUNT_SELECTION_ENABLED and not settings.DISABLE_TOPUP_BUTTONS:
        from .main import get_quick_amount_buttons

        quick_amount_buttons = get_quick_amount_buttons(db_user.language)
        if quick_amount_buttons:
            keyboard.inline_keyboard = quick_amount_buttons + keyboard.inline_keyboard

    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML",
    )

    await state.set_state(BalanceStates.waiting_for_amount)
    await state.update_data(payment_method="wata")
    await callback.answer()


@error_handler
async def process_wata_payment_amount(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    amount_kopeks: int,
    state: FSMContext,
):
    texts = get_texts(db_user.language)

    if not settings.is_wata_enabled():
        await message.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ WATA –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    if amount_kopeks < settings.WATA_MIN_AMOUNT_KOPEKS:
        await message.answer(
            texts.t(
                "WATA_AMOUNT_TOO_LOW",
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}",
            ).format(amount=settings.format_price(settings.WATA_MIN_AMOUNT_KOPEKS))
        )
        return

    if amount_kopeks > settings.WATA_MAX_AMOUNT_KOPEKS:
        await message.answer(
            texts.t(
                "WATA_AMOUNT_TOO_HIGH",
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount}",
            ).format(amount=settings.format_price(settings.WATA_MAX_AMOUNT_KOPEKS))
        )
        return

    payment_service = PaymentService(message.bot)

    try:
        result = await payment_service.create_wata_payment(
            db=db,
            user_id=db_user.id,
            amount_kopeks=amount_kopeks,
            description=settings.get_balance_payment_description(amount_kopeks),
            language=db_user.language,
        )
    except Exception as error:  # pragma: no cover - handled by decorator logs
        logger.exception("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WATA –ø–ª–∞—Ç–µ–∂–∞: %s", error)
        result = None

    if not result or not result.get("payment_url"):
        await message.answer(
            texts.t(
                "WATA_PAYMENT_ERROR",
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ WATA. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            )
        )
        await state.clear()
        return

    payment_url = result["payment_url"]
    payment_link_id = result["payment_link_id"]
    local_payment_id = result["local_payment_id"]

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t("WATA_PAY_BUTTON", "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ WATA"),
                    url=payment_url,
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.t("CHECK_STATUS_BUTTON", "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
                    callback_data=f"check_wata_{local_payment_id}",
                )
            ],
            [types.InlineKeyboardButton(text=texts.BACK, callback_data="balance_topup")],
        ]
    )

    message_template = texts.t(
        "WATA_PAYMENT_INSTRUCTIONS",
        (
            "üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ WATA</b>\n\n"
            "üí∞ –°—É–º–º–∞: {amount}\n"
            "üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n\n"
            "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ WATA'\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
            "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥\n"
            "4. –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            "‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ {support}"
        ),
    )

    message_text = message_template.format(
        amount=settings.format_price(amount_kopeks),
        payment_id=payment_link_id,
        support=settings.get_support_contact_display_html(),
    )

    await message.answer(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML",
    )

    await state.clear()

    logger.info(
        "–°–æ–∑–¥–∞–Ω WATA –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s‚ÇΩ, —Å—Å—ã–ª–∫–∞: %s",
        db_user.telegram_id,
        amount_kopeks / 100,
        payment_link_id,
    )


@error_handler
async def check_wata_payment_status(
    callback: types.CallbackQuery,
    db: AsyncSession,
):
    try:
        local_payment_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return

    payment_service = PaymentService(callback.bot)
    status_info = await payment_service.get_wata_payment_status(db, local_payment_id)

    if not status_info:
        await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    payment = status_info["payment"]

    user_language = "ru"
    try:
        user = await fetch_user_by_id(db, payment.user_id)
        if user and getattr(user, "language", None):
            user_language = user.language
    except Exception as error:
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è WATA —Å—Ç–∞—Ç—É—Å–∞: %s", error)

    texts = get_texts(user_language)

    status_labels: Dict[str, Dict[str, str]] = {
        "Opened": {"emoji": "‚è≥", "label": texts.t("WATA_STATUS_OPENED", "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã")},
        "Closed": {"emoji": "‚åõ", "label": texts.t("WATA_STATUS_CLOSED", "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")},
        "Paid": {"emoji": "‚úÖ", "label": texts.t("WATA_STATUS_PAID", "–û–ø–ª–∞—á–µ–Ω")},
        "Declined": {"emoji": "‚ùå", "label": texts.t("WATA_STATUS_DECLINED", "–û—Ç–∫–ª–æ–Ω–µ–Ω")},
    }

    label_info = status_labels.get(payment.status, {"emoji": "‚ùì", "label": texts.t("WATA_STATUS_UNKNOWN", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")})

    message_lines = [
        texts.t("WATA_STATUS_TITLE", "üí≥ <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ WATA</b>"),
        "",
        f"üÜî ID: {payment.payment_link_id}",
        f"üí∞ –°—É–º–º–∞: {settings.format_price(payment.amount_kopeks)}",
        f"üìä –°—Ç–∞—Ç—É—Å: {label_info['emoji']} {label_info['label']}",
        f"üìÖ –°–æ–∑–¥–∞–Ω: {payment.created_at.strftime('%d.%m.%Y %H:%M') if payment.created_at else '‚Äî'}",
    ]

    if payment.is_paid:
        message_lines.append("\n‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –°—Ä–µ–¥—Å—Ç–≤–∞ —É–∂–µ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
    elif payment.status in {"Opened", "Closed"}:
        message_lines.append(
            "\n‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ."
        )

    await callback.message.answer("\n".join(message_lines), parse_mode="HTML")
    await callback.answer()
