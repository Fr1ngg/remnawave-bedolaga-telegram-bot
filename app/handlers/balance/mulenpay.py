import logging
from aiogram import types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.keyboards.inline import get_back_keyboard
from app.localization.texts import get_texts
from app.services.payment_service import PaymentService
from app.utils.decorators import error_handler
from app.states import BalanceStates

logger = logging.getLogger(__name__)


@error_handler
async def start_mulenpay_payment(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
):
    texts = get_texts(db_user.language)
    mulenpay_name = settings.get_mulenpay_display_name()
    mulenpay_name_html = settings.get_mulenpay_display_name_html()

    if not settings.is_mulenpay_enabled():
        await callback.answer(
            f"‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {mulenpay_name} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
            show_alert=True,
        )
        return

    message_template = texts.t(
        "MULENPAY_TOPUP_PROMPT",
        (
            "üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {mulenpay_name_html}</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 100 –¥–æ 100 000 ‚ÇΩ.\n"
            "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É {mulenpay_name}."
        ),
    )
    message_text = message_template.format(
        mulenpay_name=mulenpay_name,
        mulenpay_name_html=mulenpay_name_html,
    )

    keyboard = get_back_keyboard(db_user.language)

    if settings.YOOKASSA_QUICK_AMOUNT_SELECTION_ENABLED and not settings.DISABLE_TOPUP_BUTTONS:
        from .main import get_quick_amount_buttons
        quick_amount_buttons = get_quick_amount_buttons(db_user.language)
        if quick_amount_buttons:
            keyboard.inline_keyboard = quick_amount_buttons + keyboard.inline_keyboard

    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML",
    )

    await state.set_state(BalanceStates.waiting_for_amount)
    await state.update_data(payment_method="mulenpay")
    await callback.answer()


@error_handler
async def process_mulenpay_payment_amount(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    amount_kopeks: int,
    state: FSMContext,
):
    texts = get_texts(db_user.language)
    mulenpay_name = settings.get_mulenpay_display_name()
    mulenpay_name_html = settings.get_mulenpay_display_name_html()

    if not settings.is_mulenpay_enabled():
        await message.answer(f"‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {mulenpay_name} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    if amount_kopeks < settings.MULENPAY_MIN_AMOUNT_KOPEKS:
        await message.answer(
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {settings.format_price(settings.MULENPAY_MIN_AMOUNT_KOPEKS)}"
        )
        return

    if amount_kopeks > settings.MULENPAY_MAX_AMOUNT_KOPEKS:
        await message.answer(
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {settings.format_price(settings.MULENPAY_MAX_AMOUNT_KOPEKS)}"
        )
        return

    amount_rubles = amount_kopeks / 100

    try:
        payment_service = PaymentService(message.bot)
        payment_result = await payment_service.create_mulenpay_payment(
            db=db,
            user_id=db_user.id,
            amount_kopeks=amount_kopeks,
            description=settings.get_balance_payment_description(amount_kopeks),
            language=db_user.language,
        )

        if not payment_result or not payment_result.get("payment_url"):
            await message.answer(
                texts.t(
                    "MULENPAY_PAYMENT_ERROR",
                    "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ {mulenpay_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                ).format(mulenpay_name=mulenpay_name)
            )
            await state.clear()
            return

        payment_url = payment_result.get("payment_url")
        mulen_payment_id = payment_result.get("mulen_payment_id")
        local_payment_id = payment_result.get("local_payment_id")

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=texts.t(
                            "MULENPAY_PAY_BUTTON",
                            "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ {mulenpay_name}",
                        ).format(mulenpay_name=mulenpay_name),
                        url=payment_url,
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text=texts.t("CHECK_STATUS_BUTTON", "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
                        callback_data=f"check_mulenpay_{local_payment_id}",
                    )
                ],
                [types.InlineKeyboardButton(text=texts.BACK, callback_data="balance_topup")],
            ]
        )

        payment_id_display = mulen_payment_id if mulen_payment_id is not None else local_payment_id

        message_template = texts.t(
            "MULENPAY_PAYMENT_INSTRUCTIONS",
            (
                "üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {mulenpay_name_html}</b>\n\n"
                "üí∞ –°—É–º–º–∞: {amount}\n"
                "üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}\n\n"
                "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ {mulenpay_name}'\n"
                "2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
                "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥\n"
                "4. –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                "‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ {support}"
            ),
        )

        message_text = message_template.format(
            amount=settings.format_price(amount_kopeks),
            payment_id=payment_id_display,
            support=settings.get_support_contact_display_html(),
            mulenpay_name=mulenpay_name,
            mulenpay_name_html=mulenpay_name_html,
        )

        await message.answer(
            message_text,
            reply_markup=keyboard,
            parse_mode="HTML",
        )

        await state.clear()

        logger.info(
            "–°–æ–∑–¥–∞–Ω %s –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s‚ÇΩ, ID: %s",
            mulenpay_name,
            db_user.telegram_id,
            amount_rubles,
            payment_id_display,
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {mulenpay_name} –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer(
            texts.t(
                "MULENPAY_PAYMENT_ERROR",
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ {mulenpay_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            ).format(mulenpay_name=mulenpay_name)
        )
        await state.clear()


@error_handler
async def check_mulenpay_payment_status(
    callback: types.CallbackQuery,
    db: AsyncSession
):
    try:
        local_payment_id = int(callback.data.split('_')[-1])
        payment_service = PaymentService(callback.bot)
        status_info = await payment_service.get_mulenpay_payment_status(db, local_payment_id)

        if not status_info:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        payment = status_info["payment"]

        status_labels = {
            "created": ("‚è≥", "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"),
            "processing": ("‚åõ", "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è"),
            "success": ("‚úÖ", "–û–ø–ª–∞—á–µ–Ω"),
            "canceled": ("‚ùå", "–û—Ç–º–µ–Ω–µ–Ω"),
            "error": ("‚ö†Ô∏è", "–û—à–∏–±–∫–∞"),
            "hold": ("üîí", "–•–æ–ª–¥"),
            "unknown": ("‚ùì", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
        }

        emoji, status_text = status_labels.get(payment.status, ("‚ùì", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))

        mulenpay_name = settings.get_mulenpay_display_name()
        message_lines = [
            f"üí≥ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {mulenpay_name}:\n\n",
            f"üÜî ID: {payment.mulen_payment_id or payment.id}\n",
            f"üí∞ –°—É–º–º–∞: {settings.format_price(payment.amount_kopeks)}\n",
            f"üìä –°—Ç–∞—Ç—É—Å: {emoji} {status_text}\n",
            f"üìÖ –°–æ–∑–¥–∞–Ω: {payment.created_at.strftime('%d.%m.%Y %H:%M')}\n",
        ]

        if payment.is_paid:
            message_lines.append("\n‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –°—Ä–µ–¥—Å—Ç–≤–∞ —É–∂–µ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
        elif payment.status in {"created", "processing"}:
            message_lines.append(
                "\n‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ."
            )
            if payment.payment_url:
                message_lines.append(f"\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {payment.payment_url}")
        elif payment.status in {"canceled", "error"}:
            message_lines.append(
                f"\n‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ {settings.get_support_contact_display()}"
            )

        message_text = "".join(message_lines)

        if len(message_text) > 190:
            await callback.message.answer(message_text)
            await callback.answer("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç", show_alert=True)
        else:
            await callback.answer(message_text, show_alert=True)

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ {settings.get_mulenpay_display_name()}: {e}"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)