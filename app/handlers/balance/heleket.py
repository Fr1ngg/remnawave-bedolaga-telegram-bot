import logging
from typing import Optional

from aiogram import types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.keyboards.inline import get_back_keyboard
from app.localization.texts import get_texts
from app.services.payment_service import PaymentService
from app.states import BalanceStates
from app.utils.decorators import error_handler

logger = logging.getLogger(__name__)


@error_handler
async def start_heleket_payment(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
) -> None:
    texts = get_texts(db_user.language)

    if not settings.is_heleket_enabled():
        await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Heleket –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    markup = settings.get_heleket_markup_percent()
    markup_text: Optional[str]
    if markup > 0:
        label = texts.t("PAYMENT_HELEKET_MARKUP_LABEL", "–ù–∞—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
        markup_text = f"{label}: {markup:.0f}%"
    elif markup < 0:
        label = texts.t("PAYMENT_HELEKET_DISCOUNT_LABEL", "–°–∫–∏–¥–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
        markup_text = f"{label}: {abs(markup):.0f}%"
    else:
        markup_text = None

    message_lines = [
        "ü™ô <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Heleket</b>",
        "\n",
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç 100 –¥–æ 100,000 ‚ÇΩ:",
        "",
        "‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ", "üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞",
    ]

    if markup_text:
        message_lines.extend(["", markup_text])

    keyboard = get_back_keyboard(db_user.language)

    if settings.YOOKASSA_QUICK_AMOUNT_SELECTION_ENABLED and not settings.DISABLE_TOPUP_BUTTONS:
        from .main import get_quick_amount_buttons

        quick_buttons = get_quick_amount_buttons(db_user.language)
        if quick_buttons:
            keyboard.inline_keyboard = quick_buttons + keyboard.inline_keyboard

    await callback.message.edit_text(
        "\n".join(filter(None, message_lines)),
        reply_markup=keyboard,
        parse_mode="HTML",
    )

    await state.set_state(BalanceStates.waiting_for_amount)
    await state.update_data(payment_method="heleket")
    await callback.answer()


@error_handler
async def process_heleket_payment_amount(
    message: types.Message,
    db_user: User,
    db: AsyncSession,
    amount_kopeks: int,
    state: FSMContext,
) -> None:
    texts = get_texts(db_user.language)

    if not settings.is_heleket_enabled():
        await message.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Heleket –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    amount_rubles = amount_kopeks / 100

    if amount_rubles < 100:
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 ‚ÇΩ")
        return

    if amount_rubles > 100000:
        await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100,000 ‚ÇΩ")
        return

    payment_service = PaymentService(message.bot)

    result = await payment_service.create_heleket_payment(
        db=db,
        user_id=db_user.id,
        amount_kopeks=amount_kopeks,
        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount_rubles:.0f} ‚ÇΩ",
        language=db_user.language,
    )

    if not result:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç –≤ Heleket. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        await state.clear()
        return

    payment_url = result.get("payment_url")
    if not payment_url:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã Heleket")
        await state.clear()
        return

    payer_amount = result.get("payer_amount")
    payer_currency = result.get("payer_currency")
    exchange_rate = result.get("exchange_rate")
    discount_percent = result.get("discount_percent")

    details = [
        "ü™ô <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Heleket</b>",
        "",
        f"üí∞ –°—É–º–º–∞ –∫ –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: {amount_rubles:.0f} ‚ÇΩ",
    ]

    if payer_amount and payer_currency:
        details.append(f"ü™ô –ö –æ–ø–ª–∞—Ç–µ: {payer_amount} {payer_currency}")

    markup_percent: Optional[float] = None
    if discount_percent is not None:
        try:
            discount_int = int(discount_percent)
            markup_percent = -discount_int
        except (TypeError, ValueError):
            markup_percent = None

    if markup_percent:
        label_markup = texts.t("PAYMENT_HELEKET_MARKUP_LABEL", "–ù–∞—Ü–µ–Ω–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
        label_discount = texts.t("PAYMENT_HELEKET_DISCOUNT_LABEL", "–°–∫–∏–¥–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
        absolute = abs(markup_percent)
        if markup_percent > 0:
            details.append(f"üìà {label_markup}: +{absolute}%")
        else:
            details.append(f"üìâ {label_discount}: {absolute}%")

    if payer_amount and payer_currency:
        try:
            payer_amount_float = float(payer_amount)
            if payer_amount_float > 0:
                rub_per_currency = amount_rubles / payer_amount_float
                details.append(
                    f"üí± –ö—É—Ä—Å: 1 {payer_currency} ‚âà {rub_per_currency:.2f} ‚ÇΩ"
                )
        except (TypeError, ValueError, ZeroDivisionError):
            pass

    details.extend(
        [
            "",
            "üì± –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:",
            "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å'",
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Heleket",
            "3. –û–ø–ª–∞—Ç–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É",
            "4. –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        ]
    )

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=texts.t("PAY_WITH_COINS_BUTTON", "ü™ô –û–ø–ª–∞—Ç–∏—Ç—å"), url=payment_url)],
        [
            types.InlineKeyboardButton(
                text=texts.t("CHECK_STATUS_BUTTON", "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å"),
                callback_data=f"check_heleket_{result['local_payment_id']}"
            )
        ],
        [types.InlineKeyboardButton(text=texts.BACK, callback_data="balance_topup")],
    ])

    await message.answer("\n".join(details), parse_mode="HTML", reply_markup=keyboard)
    await state.clear()


@error_handler
async def check_heleket_payment_status(
    callback: types.CallbackQuery,
    db: AsyncSession,
) -> None:
    try:
        local_payment_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return

    from app.database.crud.heleket import get_heleket_payment_by_id

    payment = await get_heleket_payment_by_id(db, local_payment_id)
    if not payment:
        await callback.answer("–ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    if payment.is_paid:
        await callback.answer("‚úÖ –ü–ª–∞—Ç—ë–∂ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω", show_alert=True)
        return

    await callback.answer("–ü–ª–∞—Ç—ë–∂ –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω", show_alert=True)
