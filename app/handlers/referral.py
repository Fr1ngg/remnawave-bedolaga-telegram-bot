import logging
from pathlib import Path

import qrcode
from aiogram import Dispatcher, F, types
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import FSInputFile
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.keyboards.inline import get_referral_keyboard
from app.localization.texts import get_texts
from app.utils.photo_message import edit_or_answer_photo
from app.utils.user_utils import (
    get_detailed_referral_list,
    get_referral_analytics,
    get_user_referral_summary,
)

logger = logging.getLogger(__name__)


async def show_referral_info(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)
    
    summary = await get_user_referral_summary(db, db_user.id)
    
    bot_username = (await callback.bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start={db_user.referral_code}"
    
    referral_text = (
        texts.t("REFERRAL_PROGRAM_TITLE", "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>")
        + "\n\n"
        + texts.t("REFERRAL_STATS_HEADER", "üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>")
        + "\n"
        + texts.t(
            "REFERRAL_STATS_INVITED",
            "‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{count}</b>",
        ).format(count=summary['invited_count'])
        + "\n"
        + texts.t(
            "REFERRAL_STATS_FIRST_TOPUPS",
            "‚Ä¢ –°–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <b>{count}</b>",
        ).format(count=summary['paid_referrals_count'])
        + "\n"
        + texts.t(
            "REFERRAL_STATS_ACTIVE",
            "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{count}</b>",
        ).format(count=summary['active_referrals_count'])
        + "\n"
        + texts.t(
            "REFERRAL_STATS_CONVERSION",
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: <b>{rate}%</b>",
        ).format(rate=summary['conversion_rate'])
        + "\n"
        + texts.t(
            "REFERRAL_STATS_TOTAL_EARNED",
            "‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –≤—Å–µ–≥–æ: <b>{amount}</b>",
        ).format(amount=texts.format_price(summary['total_earned_kopeks']))
        + "\n"
        + texts.t(
            "REFERRAL_STATS_MONTH_EARNED",
            "‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: <b>{amount}</b>",
        ).format(amount=texts.format_price(summary['month_earned_kopeks']))
        + "\n\n"
        + texts.t("REFERRAL_REWARDS_HEADER", "üéÅ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞–≥—Ä–∞–¥—ã:</b>")
        + "\n"
        + texts.t(
            "REFERRAL_REWARD_NEW_USER",
            "‚Ä¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç: <b>{bonus}</b> –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç <b>{minimum}</b>",
        ).format(
            bonus=texts.format_price(settings.REFERRAL_FIRST_TOPUP_BONUS_KOPEKS),
            minimum=texts.format_price(settings.REFERRAL_MINIMUM_TOPUP_KOPEKS),
        )
        + "\n"
        + texts.t(
            "REFERRAL_REWARD_INVITER",
            "‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: <b>{bonus}</b>",
        ).format(bonus=texts.format_price(settings.REFERRAL_INVITER_BONUS_KOPEKS))
        + "\n"
        + texts.t(
            "REFERRAL_REWARD_COMMISSION",
            "‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞: <b>{percent}%</b>",
        ).format(percent=settings.REFERRAL_COMMISSION_PERCENT)
        + "\n\n"
        + texts.t("REFERRAL_LINK_TITLE", "üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>")
        + f"\n<code>{referral_link}</code>\n\n"
        + texts.t("REFERRAL_CODE_TITLE", "üÜî <b>–í–∞—à –∫–æ–¥:</b> <code>{code}</code>").format(code=db_user.referral_code)
        + "\n\n"
    )

    if summary['recent_earnings']:
        meaningful_earnings = [
            earning for earning in summary['recent_earnings'][:5]
            if earning['amount_kopeks'] > 0
        ]

        if meaningful_earnings:
            referral_text += texts.t(
                "REFERRAL_RECENT_EARNINGS_HEADER",
                "üí∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:</b>",
            ) + "\n"
            for earning in meaningful_earnings[:3]:
                reason_text = {
                    "referral_first_topup": texts.t(
                        "REFERRAL_EARNING_REASON_FIRST_TOPUP",
                        "üéâ –ü–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ",
                    ),
                    "referral_commission_topup": texts.t(
                        "REFERRAL_EARNING_REASON_COMMISSION_TOPUP",
                        "üí∞ –ö–æ–º–∏—Å—Å–∏—è —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
                    ),
                    "referral_commission": texts.t(
                        "REFERRAL_EARNING_REASON_COMMISSION_PURCHASE",
                        "üí∞ –ö–æ–º–∏—Å—Å–∏—è —Å –ø–æ–∫—É–ø–∫–∏",
                    ),
                }.get(earning['reason'], earning['reason'])

                referral_text += texts.t(
                    "REFERRAL_RECENT_EARNINGS_ITEM",
                    "‚Ä¢ {reason}: <b>{amount}</b> –æ—Ç {referral_name}",
                ).format(
                    reason=reason_text,
                    amount=texts.format_price(earning['amount_kopeks']),
                    referral_name=earning['referral_name'],
                ) + "\n"
            referral_text += "\n"

    if summary['earnings_by_type']:
        referral_text += texts.t(
            "REFERRAL_EARNINGS_BY_TYPE_HEADER",
            "üìà <b>–î–æ—Ö–æ–¥—ã –ø–æ —Ç–∏–ø–∞–º:</b>",
        ) + "\n"

        if 'referral_first_topup' in summary['earnings_by_type']:
            data = summary['earnings_by_type']['referral_first_topup']
            if data['total_amount_kopeks'] > 0:
                referral_text += texts.t(
                    "REFERRAL_EARNINGS_FIRST_TOPUPS",
                    "‚Ä¢ –ë–æ–Ω—É—Å—ã –∑–∞ –ø–µ—Ä–≤—ã–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{count}</b> ({amount})",
                ).format(
                    count=data['count'],
                    amount=texts.format_price(data['total_amount_kopeks']),
                ) + "\n"

        if 'referral_commission_topup' in summary['earnings_by_type']:
            data = summary['earnings_by_type']['referral_commission_topup']
            if data['total_amount_kopeks'] > 0:
                referral_text += texts.t(
                    "REFERRAL_EARNINGS_TOPUPS",
                    "‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: <b>{count}</b> ({amount})",
                ).format(
                    count=data['count'],
                    amount=texts.format_price(data['total_amount_kopeks']),
                ) + "\n"

        if 'referral_commission' in summary['earnings_by_type']:
            data = summary['earnings_by_type']['referral_commission']
            if data['total_amount_kopeks'] > 0:
                referral_text += texts.t(
                    "REFERRAL_EARNINGS_PURCHASES",
                    "‚Ä¢ –ö–æ–º–∏—Å—Å–∏–∏ —Å –ø–æ–∫—É–ø–æ–∫: <b>{count}</b> ({amount})",
                ).format(
                    count=data['count'],
                    amount=texts.format_price(data['total_amount_kopeks']),
                ) + "\n"

        referral_text += "\n"

    referral_text += texts.t(
        "REFERRAL_INVITE_FOOTER",
        "üì¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!",
    )

    await edit_or_answer_photo(
        callback,
        referral_text,
        get_referral_keyboard(db_user.language),
    )
    await callback.answer()


async def show_referral_qr(
    callback: types.CallbackQuery,
    db_user: User,
):
    await callback.answer()

    texts = get_texts(db_user.language)

    bot_username = (await callback.bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start={db_user.referral_code}"

    qr_dir = Path("data") / "referral_qr"
    qr_dir.mkdir(parents=True, exist_ok=True)

    file_path = qr_dir / f"{db_user.id}.png"
    if not file_path.exists():
        img = qrcode.make(referral_link)
        img.save(file_path)

    photo = FSInputFile(file_path)
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text=texts.BACK, callback_data="menu_referrals")]]
    )

    try:
        await callback.message.edit_media(
            types.InputMediaPhoto(
                media=photo,
                caption=texts.t(
                    "REFERRAL_LINK_CAPTION",
                    "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}",
                ).format(link=referral_link),
            ),
            reply_markup=keyboard,
        )
    except TelegramBadRequest:
        await callback.message.delete()
        await callback.message.answer_photo(
            photo,
            caption=texts.t(
                "REFERRAL_LINK_CAPTION",
                "üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}",
            ).format(link=referral_link),
            reply_markup=keyboard,
        )


async def show_detailed_referral_list(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
    page: int = 1
):
    texts = get_texts(db_user.language)

    referrals_data = await get_detailed_referral_list(db, db_user.id, limit=10, offset=(page - 1) * 10)

    if not referrals_data['referrals']:
        await edit_or_answer_photo(
            callback,
            texts.t(
                "REFERRAL_LIST_EMPTY",
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!",
            ),
            types.InlineKeyboardMarkup(
                inline_keyboard=[[types.InlineKeyboardButton(text=texts.BACK, callback_data="menu_referrals")]]
            ),
            parse_mode=None,
        )
        await callback.answer()
        return

    text = texts.t(
        "REFERRAL_LIST_HEADER",
        "üë• <b>–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b> (—Å—Ç—Ä. {current}/{total})",
    ).format(
        current=referrals_data['current_page'],
        total=referrals_data['total_pages'],
    ) + "\n\n"
    
    for i, referral in enumerate(referrals_data['referrals'], 1):
        status_emoji = "üü¢" if referral['status'] == 'active' else "üî¥"
        
        topup_emoji = "üí∞" if referral['has_made_first_topup'] else "‚è≥"
        
        text += texts.t(
            "REFERRAL_LIST_ITEM_HEADER",
            "{index}. {status} <b>{name}</b>",
        ).format(index=i, status=status_emoji, name=referral['full_name']) + "\n"
        text += texts.t(
            "REFERRAL_LIST_ITEM_TOPUPS",
            "   {emoji} –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {count}",
        ).format(emoji=topup_emoji, count=referral['topups_count']) + "\n"
        text += texts.t(
            "REFERRAL_LIST_ITEM_EARNED",
            "   üíé –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –Ω–µ–≥–æ: {amount}",
        ).format(amount=texts.format_price(referral['total_earned_kopeks'])) + "\n"
        text += texts.t(
            "REFERRAL_LIST_ITEM_REGISTERED",
            "   üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {days} –¥–Ω. –Ω–∞–∑–∞–¥",
        ).format(days=referral['days_since_registration']) + "\n"

        if referral['days_since_activity'] is not None:
            text += texts.t(
                "REFERRAL_LIST_ITEM_ACTIVITY",
                "   üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {days} –¥–Ω. –Ω–∞–∑–∞–¥",
            ).format(days=referral['days_since_activity']) + "\n"
        else:
            text += texts.t(
                "REFERRAL_LIST_ITEM_ACTIVITY_LONG_AGO",
                "   üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –¥–∞–≤–Ω–æ",
            ) + "\n"
        
        text += "\n"
    
    keyboard = []
    nav_buttons = []
    
    if referrals_data['has_prev']:
        nav_buttons.append(types.InlineKeyboardButton(
            text=texts.t("REFERRAL_LIST_PREV_PAGE", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
            callback_data=f"referral_list_page_{page - 1}"
        ))

    if referrals_data['has_next']:
        nav_buttons.append(types.InlineKeyboardButton(
            text=texts.t("REFERRAL_LIST_NEXT_PAGE", "–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è"),
            callback_data=f"referral_list_page_{page + 1}"
        ))
    
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    keyboard.append([types.InlineKeyboardButton(
        text=texts.BACK,
        callback_data="menu_referrals"
    )])

    await edit_or_answer_photo(
        callback,
        text,
        types.InlineKeyboardMarkup(inline_keyboard=keyboard),
    )
    await callback.answer()


async def show_referral_analytics(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    texts = get_texts(db_user.language)

    analytics = await get_referral_analytics(db, db_user.id)

    text = texts.t("REFERRAL_ANALYTICS_TITLE", "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>") + "\n\n"

    text += texts.t(
        "REFERRAL_ANALYTICS_EARNINGS_HEADER",
        "üí∞ <b>–î–æ—Ö–æ–¥—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>",
    ) + "\n"
    text += texts.t(
        "REFERRAL_ANALYTICS_EARNINGS_TODAY",
        "‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {amount}",
    ).format(amount=texts.format_price(analytics['earnings_by_period']['today'])) + "\n"
    text += texts.t(
        "REFERRAL_ANALYTICS_EARNINGS_WEEK",
        "‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {amount}",
    ).format(amount=texts.format_price(analytics['earnings_by_period']['week'])) + "\n"
    text += texts.t(
        "REFERRAL_ANALYTICS_EARNINGS_MONTH",
        "‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {amount}",
    ).format(amount=texts.format_price(analytics['earnings_by_period']['month'])) + "\n"
    text += texts.t(
        "REFERRAL_ANALYTICS_EARNINGS_QUARTER",
        "‚Ä¢ –ó–∞ –∫–≤–∞—Ä—Ç–∞–ª: {amount}",
    ).format(amount=texts.format_price(analytics['earnings_by_period']['quarter'])) + "\n\n"

    if analytics['top_referrals']:
        text += texts.t(
            "REFERRAL_ANALYTICS_TOP_TITLE",
            "üèÜ <b>–¢–æ–ø-{count} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b>",
        ).format(count=len(analytics['top_referrals'])) + "\n"
        for i, ref in enumerate(analytics['top_referrals'], 1):
            text += texts.t(
                "REFERRAL_ANALYTICS_TOP_ITEM",
                "{index}. {name}: {amount} ({count} –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π)",
            ).format(
                index=i,
                name=ref['referral_name'],
                amount=texts.format_price(ref['total_earned_kopeks']),
                count=ref['earnings_count'],
            ) + "\n"
        text += "\n"

    text += texts.t(
        "REFERRAL_ANALYTICS_FOOTER",
        "üìà –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–µ—Ç—å!",
    )

    await edit_or_answer_photo(
        callback,
        text,
        types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=texts.BACK, callback_data="menu_referrals")]
        ]),
    )
    await callback.answer()


async def create_invite_message(
    callback: types.CallbackQuery,
    db_user: User
):
    texts = get_texts(db_user.language)

    bot_username = (await callback.bot.get_me()).username
    referral_link = f"https://t.me/{bot_username}?start={db_user.referral_code}"

    invite_text = (
        texts.t("REFERRAL_INVITE_TITLE", "üéâ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ VPN —Å–µ—Ä–≤–∏—Å—É!")
        + "\n\n"
        + texts.t(
            "REFERRAL_INVITE_BONUS",
            "üíé –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç {minimum} —Ç—ã –ø–æ–ª—É—á–∏—à—å {bonus} –±–æ–Ω—É—Å–æ–º –Ω–∞ –±–∞–ª–∞–Ω—Å!",
        ).format(
            minimum=texts.format_price(settings.REFERRAL_MINIMUM_TOPUP_KOPEKS),
            bonus=texts.format_price(settings.REFERRAL_FIRST_TOPUP_BONUS_KOPEKS),
        )
        + "\n\n"
        + texts.t("REFERRAL_INVITE_FEATURE_FAST", "üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        + "\n"
        + texts.t("REFERRAL_INVITE_FEATURE_SERVERS", "üåç –°–µ—Ä–≤–µ—Ä—ã –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É")
        + "\n"
        + texts.t("REFERRAL_INVITE_FEATURE_SECURE", "üîí –ù–∞–¥–µ–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞")
        + "\n\n"
        + texts.t("REFERRAL_INVITE_LINK_PROMPT", "üëá –ü–µ—Ä–µ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ:")
        + f"\n{referral_link}"
    )

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(
            text=texts.t("REFERRAL_SHARE_BUTTON", "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è"),
            switch_inline_query=invite_text
        )],
        [types.InlineKeyboardButton(
            text=texts.BACK,
            callback_data="menu_referrals"
        )]
    ])

    await edit_or_answer_photo(
        callback,
        (
            texts.t("REFERRAL_INVITE_CREATED_TITLE", "üìù <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>")
            + "\n\n"
            + texts.t(
                "REFERRAL_INVITE_CREATED_INSTRUCTION",
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ª—é–±–æ–π —á–∞—Ç, –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ:",
            )
            + "\n\n"
            f"<code>{invite_text}</code>"
        ),
        keyboard,
    )
    await callback.answer()


def register_handlers(dp: Dispatcher):
    
    dp.callback_query.register(
        show_referral_info,
        F.data == "menu_referrals"
    )
    
    dp.callback_query.register(
        create_invite_message,
        F.data == "referral_create_invite"
    )

    dp.callback_query.register(
        show_referral_qr,
        F.data == "referral_show_qr"
    )
    
    dp.callback_query.register(
        show_detailed_referral_list,
        F.data == "referral_list"
    )
    
    dp.callback_query.register(
        show_referral_analytics,
        F.data == "referral_analytics"
    )
    
    dp.callback_query.register(
        lambda callback, db_user, db: show_detailed_referral_list(
            callback, db_user, db, int(callback.data.split('_')[-1])
        ),
        F.data.startswith("referral_list_page_")
    )
