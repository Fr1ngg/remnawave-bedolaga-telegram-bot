import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from app.services.redis_health_check import redis_health_checker
from app.services.redis_service import redis_service
from app.utils.decorators import admin_required

logger = logging.getLogger(__name__)

router = Router()


@router.message(Command("redis_status"))
@admin_required
async def redis_status_handler(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Redis"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ Redis
        health_info = await redis_health_checker.check_health()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_emoji = "‚úÖ" if health_info.get('is_healthy', False) else "‚ùå"
        
        text = f"{status_emoji} **–°—Ç–∞—Ç—É—Å Redis**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text += f"**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {'–ó–¥–æ—Ä–æ–≤' if health_info.get('is_healthy') else '–ü—Ä–æ–±–ª–µ–º—ã'}\n"
        text += f"**Ping:** {'‚úÖ' if health_info.get('ping_ok') else '‚ùå'}\n"
        text += f"**–ö–ª–∏–µ–Ω—Ç—ã:** {health_info.get('connected_clients', 0)}\n"
        text += f"**–ü–∞–º—è—Ç—å:** {health_info.get('memory_usage_human', '0B')}\n"
        text += f"**–ü–∏–∫ –ø–∞–º—è—Ç–∏:** {health_info.get('memory_peak_human', '0B')}\n"
        text += f"**–û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫:** {health_info.get('ops_per_sec', 0)}\n"
        text += f"**Hit Rate:** {health_info.get('hit_rate', 0):.1f}%\n"
        text += f"**–ù–µ—É–¥–∞—á –ø–æ–¥—Ä—è–¥:** {health_info.get('consecutive_failures', 0)}\n"
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if health_info.get('last_check'):
            text += f"**–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:** {health_info.get('last_check')}\n"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = health_info.get('warnings', [])
        if warnings:
            text += f"\n**‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
            for warning in warnings:
                text += f"‚Ä¢ {warning}\n"
        
        # –û—à–∏–±–∫–∏
        if health_info.get('error'):
            text += f"\n**‚ùå –û—à–∏–±–∫–∞:** {health_info.get('error')}\n"
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="redis_refresh"),
                InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏", callback_data="redis_details")
            ],
            [
                InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à", callback_data="redis_clear_cache"),
                InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="redis_stats")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_submenu_settings")
            ]
        ])
        
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Redis: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Redis: {e}")


@router.callback_query(lambda c: c.data == "redis_status")
@admin_required
async def redis_status_callback(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å Redis —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–¥–æ—Ä–æ–≤—å–µ Redis
        health_info = await redis_health_checker.check_health()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_emoji = "‚úÖ" if health_info.get('is_healthy', False) else "‚ùå"
        
        text = f"{status_emoji} **–°—Ç–∞—Ç—É—Å Redis**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text += f"**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {'–ó–¥–æ—Ä–æ–≤' if health_info.get('is_healthy') else '–ü—Ä–æ–±–ª–µ–º—ã'}\n"
        text += f"**Ping:** {'‚úÖ' if health_info.get('ping_ok') else '‚ùå'}\n"
        text += f"**–ö–ª–∏–µ–Ω—Ç—ã:** {health_info.get('connected_clients', 0)}\n"
        text += f"**–ü–∞–º—è—Ç—å:** {health_info.get('memory_usage_human', '0B')}\n"
        text += f"**–ü–∏–∫ –ø–∞–º—è—Ç–∏:** {health_info.get('memory_peak_human', '0B')}\n"
        text += f"**–û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫:** {health_info.get('ops_per_sec', 0)}\n"
        text += f"**Hit Rate:** {health_info.get('hit_rate', 0):.1f}%\n"
        text += f"**–ù–µ—É–¥–∞—á –ø–æ–¥—Ä—è–¥:** {health_info.get('consecutive_failures', 0)}\n"
        
        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        if health_info.get('last_check'):
            text += f"**–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:** {health_info.get('last_check')}\n"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = health_info.get('warnings', [])
        if warnings:
            text += f"\n**‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
            for warning in warnings:
                text += f"‚Ä¢ {warning}\n"
        
        # –û—à–∏–±–∫–∏
        if health_info.get('error'):
            text += f"\n**‚ùå –û—à–∏–±–∫–∞:** {health_info.get('error')}\n"
        
        # –ö–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="redis_refresh"),
                InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏", callback_data="redis_details")
            ],
            [
                InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à", callback_data="redis_clear_cache"),
                InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="redis_stats")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_submenu_settings")
            ]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Redis: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Redis: {e}")
        await callback.answer()


@router.callback_query(lambda c: c.data == "redis_refresh")
@admin_required
async def redis_refresh_callback(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å Redis"""
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    health_info = await redis_health_checker.check_health()
    
    status_emoji = "‚úÖ" if health_info.get('is_healthy', False) else "‚ùå"
    
    text = f"{status_emoji} **–°—Ç–∞—Ç—É—Å Redis** (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)\n\n"
    text += f"**–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {'–ó–¥–æ—Ä–æ–≤' if health_info.get('is_healthy') else '–ü—Ä–æ–±–ª–µ–º—ã'}\n"
    text += f"**Ping:** {'‚úÖ' if health_info.get('ping_ok') else '‚ùå'}\n"
    text += f"**–ö–ª–∏–µ–Ω—Ç—ã:** {health_info.get('connected_clients', 0)}\n"
    text += f"**–ü–∞–º—è—Ç—å:** {health_info.get('memory_usage_human', '0B')}\n"
    text += f"**–û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫:** {health_info.get('ops_per_sec', 0)}\n"
    text += f"**Hit Rate:** {health_info.get('hit_rate', 0):.1f}%\n"
    
    # –ö–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="redis_refresh"),
                InlineKeyboardButton(text="üìä –î–µ—Ç–∞–ª–∏", callback_data="redis_details")
            ],
            [
                InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à", callback_data="redis_clear_cache"),
                InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="redis_stats")
            ],
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_submenu_settings")
            ]
        ])
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(lambda c: c.data == "redis_details")
@admin_required
async def redis_details_callback(callback: types.CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Redis"""
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await redis_service.get_stats()
        health_info = await redis_health_checker.check_health()
        
        text = "üìä **–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è Redis**\n\n"
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        text += "**–û–±—â–µ–µ:**\n"
        text += f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats.get('connected_clients', 0)}\n"
        text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {stats.get('used_memory', '0B')}\n"
        text += f"‚Ä¢ –ü–∏–∫ –ø–∞–º—è—Ç–∏: {stats.get('used_memory_peak', '0B')}\n"
        text += f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {stats.get('instantaneous_ops_per_sec', 0)}\n\n"
        
        # –ö–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        text += "**–ö–µ—à:**\n"
        text += f"‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π: {stats.get('keyspace_hits', 0)}\n"
        text += f"‚Ä¢ –ü—Ä–æ–º–∞—Ö–æ–≤: {stats.get('keyspace_misses', 0)}\n"
        text += f"‚Ä¢ Hit Rate: {health_info.get('hit_rate', 0):.1f}%\n\n"
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        text += "**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {stats.get('total_commands_processed', 0)}\n"
        text += f"‚Ä¢ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {health_info.get('check_duration_ms', 0):.1f}ms\n"
        text += f"‚Ä¢ –ù–µ—É–¥–∞—á –ø–æ–¥—Ä—è–¥: {health_info.get('consecutive_failures', 0)}\n"
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        warnings = health_info.get('warnings', [])
        if warnings:
            text += f"\n**‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n"
            for warning in warnings:
                text += f"‚Ä¢ {warning}\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="redis_status")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ Redis: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.callback_query(lambda c: c.data == "redis_clear_cache")
@admin_required
async def redis_clear_cache_callback(callback: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ Redis"""
    await callback.answer("–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞...")
    
    try:
        # –û—á–∏—â–∞–µ–º –∫–µ—à
        result = await redis_service.flushall()
        
        if result:
            text = "‚úÖ **–ö–µ—à Redis –æ—á–∏—â–µ–Ω**\n\n"
            text += "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã."
        else:
            text = "‚ùå **–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞**\n\n"
            text += "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à Redis."
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="redis_status")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ Redis: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")


@router.callback_query(lambda c: c.data == "redis_stats")
@admin_required
async def redis_stats_callback(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis"""
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await redis_service.get_stats()
        
        text = "üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        text += "**–ü–∞–º—è—Ç—å:**\n"
        text += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stats.get('used_memory', '0B')}\n"
        text += f"‚Ä¢ –ü–∏–∫: {stats.get('used_memory_peak', '0B')}\n\n"
        
        text += "**–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**\n"
        text += f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤: {stats.get('connected_clients', 0)}\n\n"
        
        text += "**–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:**\n"
        text += f"‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫: {stats.get('instantaneous_ops_per_sec', 0)}\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {stats.get('total_commands_processed', 0)}\n\n"
        
        text += "**–ö–µ—à:**\n"
        hits = stats.get('keyspace_hits', 0)
        misses = stats.get('keyspace_misses', 0)
        total = hits + misses
        hit_rate = (hits / total * 100) if total > 0 else 0
        
        text += f"‚Ä¢ –ü–æ–ø–∞–¥–∞–Ω–∏–π: {hits}\n"
        text += f"‚Ä¢ –ü—Ä–æ–º–∞—Ö–æ–≤: {misses}\n"
        text += f"‚Ä¢ Hit Rate: {hit_rate:.1f}%\n"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="redis_status")]
        ])
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Redis: {e}")
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@router.callback_query(lambda c: c.data == "admin_submenu_settings")
@admin_required
async def back_to_settings_callback(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    from app.handlers.admin.main import show_settings_submenu
    await show_settings_submenu(callback, None, None)


def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    dp.include_router(router)
