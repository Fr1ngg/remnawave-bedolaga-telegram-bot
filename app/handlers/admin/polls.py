import asyncio
import html
import logging
from datetime import datetime
from decimal import Decimal, InvalidOperation
from typing import List

from aiogram import Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from app.database.models import (
    Poll,
    PollAnswer,
    PollOption,
    PollQuestion,
    PollResponse,
    PollRun,
    User,
)
from app.handlers.admin.messages import get_target_name, get_target_users
from app.localization.texts import get_texts
from app.states import AdminStates
from app.utils.decorators import admin_required, error_handler

logger = logging.getLogger(__name__)


def _format_question_summary(index: int, question: PollQuestion) -> str:
    escaped_question = html.escape(question.text)
    lines = [f"{index}. {escaped_question}"]
    for opt_index, option in enumerate(sorted(question.options, key=lambda o: o.order), start=1):
        lines.append(f"   {opt_index}) {html.escape(option.text)}")
    return "\n".join(lines)


async def _get_poll(db: AsyncSession, poll_id: int) -> Poll | None:
    stmt = (
        select(Poll)
        .options(
            selectinload(Poll.questions).selectinload(PollQuestion.options),
            selectinload(Poll.runs),
        )
        .where(Poll.id == poll_id)
    )
    result = await db.execute(stmt)
    return result.unique().scalar_one_or_none()


def _get_state_questions(data: dict) -> List[dict]:
    return list(data.get("poll_questions", []))


def _ensure_questions_present(questions: List[dict]) -> None:
    if not questions:
        raise ValueError("poll_without_questions")


@admin_required
@error_handler
async def show_polls_menu(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)

    stmt = (
        select(Poll)
        .options(selectinload(Poll.questions))
        .order_by(Poll.created_at.desc())
    )
    result = await db.execute(stmt)
    polls = result.unique().scalars().all()

    text = (
        texts.t("ADMIN_POLLS_TITLE", "üìã <b>–û–ø—Ä–æ—Å—ã</b>")
        + "\n\n"
        + texts.t(
            "ADMIN_POLLS_DESCRIPTION",
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞—Å—Å—ã–ª–æ–∫.",
        )
    )

    keyboard: list[list[types.InlineKeyboardButton]] = []
    for poll in polls:
        question_count = len(poll.questions)
        reward_label = (
            texts.t("ADMIN_POLLS_REWARD_ENABLED", "üéÅ –Ω–∞–≥—Ä–∞–¥–∞ –µ—Å—Ç—å")
            if poll.reward_enabled and poll.reward_amount_kopeks > 0
            else texts.t("ADMIN_POLLS_REWARD_DISABLED", "–±–µ–∑ –Ω–∞–≥—Ä–∞–¥—ã")
        )
        button_text = f"üìã {poll.title} ({question_count}) ‚Äî {reward_label}"
        keyboard.append(
            [
                types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"admin_poll_{poll.id}",
                )
            ]
        )

    keyboard.append(
        [
            types.InlineKeyboardButton(
                text=texts.t("ADMIN_POLLS_CREATE", "‚ûï –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å"),
                callback_data="admin_poll_create",
            )
        ]
    )
    keyboard.append(
        [
            types.InlineKeyboardButton(
                text=texts.BACK,
                callback_data="admin_submenu_communications",
            )
        ]
    )

    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def start_poll_creation(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
):
    texts = get_texts(db_user.language)
    await state.set_state(AdminStates.creating_poll_title)
    await state.update_data(
        poll_questions=[],
        reward_enabled=False,
        reward_amount_kopeks=0,
    )

    await callback.message.edit_text(
        texts.t(
            "ADMIN_POLLS_ENTER_TITLE",
            "üÜï <b>–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø—Ä–æ—Å–∞.",
        ),
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def process_poll_title(
    message: types.Message,
    db_user: User,
    state: FSMContext,
):
    title = (message.text or "").strip()
    texts = get_texts(db_user.language)

    if not title:
        await message.answer(
            texts.t("ADMIN_POLLS_ENTER_TITLE_RETRY", "‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫."),
        )
        return

    await state.update_data(poll_title=title)
    await state.set_state(AdminStates.creating_poll_description)
    await message.answer(
        texts.t(
            "ADMIN_POLLS_ENTER_DESCRIPTION",
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞. HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.",
        )
    )


@admin_required
@error_handler
async def process_poll_description(
    message: types.Message,
    db_user: User,
    state: FSMContext,
):
    description = message.html_text or message.text or ""
    description = description.strip()
    texts = get_texts(db_user.language)

    if not description:
        await message.answer(
            texts.t("ADMIN_POLLS_ENTER_DESCRIPTION_RETRY", "‚ùóÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."),
        )
        return

    await state.update_data(poll_description=description)
    await state.set_state(AdminStates.creating_poll_question_text)
    await message.answer(
        texts.t(
            "ADMIN_POLLS_ENTER_QUESTION",
            "‚ùì –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –æ–ø—Ä–æ—Å–∞.",
        )
    )


@admin_required
@error_handler
async def process_poll_question_text(
    message: types.Message,
    db_user: User,
    state: FSMContext,
):
    question_text = (message.html_text or message.text or "").strip()
    texts = get_texts(db_user.language)

    if not question_text:
        await message.answer(
            texts.t(
                "ADMIN_POLLS_ENTER_QUESTION_RETRY",
                "‚ùóÔ∏è –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å –µ—â—ë —Ä–∞–∑.",
            )
        )
        return

    await state.update_data(current_question_text=question_text)
    await state.set_state(AdminStates.creating_poll_question_options)
    await message.answer(
        texts.t(
            "ADMIN_POLLS_ENTER_OPTIONS",
            "üî¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–º–∏–Ω–∏–º—É–º 2, –º–∞–∫—Å–∏–º—É–º 10).",
        )
    )


@admin_required
@error_handler
async def process_poll_question_options(
    message: types.Message,
    db_user: User,
    state: FSMContext,
):
    texts = get_texts(db_user.language)
    raw_options = (message.text or "").splitlines()
    options = [opt.strip() for opt in raw_options if opt.strip()]

    if len(options) < 2:
        await message.answer(
            texts.t(
                "ADMIN_POLLS_NEED_MORE_OPTIONS",
                "‚ùóÔ∏è –£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.",
            )
        )
        return

    if len(options) > 10:
        await message.answer(
            texts.t(
                "ADMIN_POLLS_TOO_MANY_OPTIONS",
                "‚ùóÔ∏è –ú–∞–∫—Å–∏–º—É–º 10 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –µ—â—ë —Ä–∞–∑.",
            )
        )
        return

    data = await state.get_data()
    question_text = data.get("current_question_text")
    if not question_text:
        await message.answer(
            texts.t(
                "ADMIN_POLLS_QUESTION_NOT_FOUND",
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –≤—ã–±—Ä–∞–≤ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞.",
            )
        )
        await state.set_state(AdminStates.creating_poll_question_text)
        return

    questions = _get_state_questions(data)
    questions.append({"text": question_text, "options": options})
    await state.update_data(
        poll_questions=questions,
        current_question_text=None,
    )

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_POLLS_ADD_QUESTION", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å"),
                    callback_data="admin_poll_add_question",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_POLLS_CONFIGURE_REWARD", "üéÅ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"),
                    callback_data="admin_poll_reward_menu",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_POLLS_CANCEL", "‚ùå –û—Ç–º–µ–Ω–∞"),
                    callback_data="admin_polls",
                )
            ],
        ]
    )

    await state.set_state(None)
    await message.answer(
        texts.t(
            "ADMIN_POLLS_QUESTION_ADDED",
            "‚úÖ –í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        ),
        reply_markup=keyboard,
    )


@admin_required
@error_handler
async def add_another_question(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
):
    texts = get_texts(db_user.language)
    await state.set_state(AdminStates.creating_poll_question_text)
    await callback.message.edit_text(
        texts.t(
            "ADMIN_POLLS_ENTER_QUESTION_NEXT",
            "‚ùì –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
        )
    )
    await callback.answer()


def _build_reward_menu(texts, data: dict) -> tuple[str, types.InlineKeyboardMarkup]:
    reward_enabled = bool(data.get("reward_enabled"))
    reward_amount = int(data.get("reward_amount_kopeks") or 0)
    questions = _get_state_questions(data)

    questions_summary = "\n".join(
        f"{idx}. {html.escape(q['text'])}" for idx, q in enumerate(questions, start=1)
    ) or texts.t("ADMIN_POLLS_NO_QUESTIONS", "‚Äî –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã ‚Äî")

    reward_text = (
        texts.t("ADMIN_POLLS_REWARD_ON", "–í–∫–ª—é—á–µ–Ω–∞")
        if reward_enabled and reward_amount > 0
        else texts.t("ADMIN_POLLS_REWARD_OFF", "–û—Ç–∫–ª—é—á–µ–Ω–∞")
    )
    reward_amount_label = texts.format_price(reward_amount)

    text = (
        texts.t("ADMIN_POLLS_REWARD_TITLE", "üéÅ <b>–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ —É—á–∞—Å—Ç–∏–µ</b>")
        + "\n\n"
        + texts.t("ADMIN_POLLS_REWARD_STATUS", "–°—Ç–∞—Ç—É—Å: <b>{status}</b>" ).format(status=reward_text)
        + "\n"
        + texts.t(
            "ADMIN_POLLS_REWARD_AMOUNT",
            "–°—É–º–º–∞: <b>{amount}</b>",
        ).format(amount=reward_amount_label)
        + "\n\n"
        + texts.t("ADMIN_POLLS_REWARD_QUESTIONS", "–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {count}").format(count=len(questions))
        + "\n"
        + questions_summary
    )

    toggle_text = (
        texts.t("ADMIN_POLLS_REWARD_DISABLE", "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É")
        if reward_enabled
        else texts.t("ADMIN_POLLS_REWARD_ENABLE", "üîî –í–∫–ª—é—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É")
    )

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=toggle_text,
                    callback_data="admin_poll_toggle_reward",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_POLLS_REWARD_SET_AMOUNT", "üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É"),
                    callback_data="admin_poll_reward_amount",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_POLLS_SAVE", "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–æ—Å"),
                    callback_data="admin_poll_save",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_POLLS_ADD_MORE", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å"),
                    callback_data="admin_poll_add_question",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_POLLS_CANCEL", "‚ùå –û—Ç–º–µ–Ω–∞"),
                    callback_data="admin_polls",
                )
            ],
        ]
    )

    return text, keyboard


@admin_required
@error_handler
async def show_reward_menu(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
):
    data = await state.get_data()
    texts = get_texts(db_user.language)
    try:
        _ensure_questions_present(_get_state_questions(data))
    except ValueError:
        await callback.answer(
            texts.t(
                "ADMIN_POLLS_NEED_QUESTION_FIRST",
                "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –Ω–∞–≥—Ä–∞–¥—ã.",
            ),
            show_alert=True,
        )
        return

    text, keyboard = _build_reward_menu(texts, data)
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@admin_required
@error_handler
async def toggle_reward(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
):
    data = await state.get_data()
    reward_enabled = bool(data.get("reward_enabled"))
    reward_amount = int(data.get("reward_amount_kopeks") or 0)

    reward_enabled = not reward_enabled
    if reward_enabled and reward_amount <= 0:
        reward_amount = 1000

    await state.update_data(
        reward_enabled=reward_enabled,
        reward_amount_kopeks=reward_amount,
    )

    texts = get_texts(db_user.language)
    text, keyboard = _build_reward_menu(texts, await state.get_data())
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@admin_required
@error_handler
async def request_reward_amount(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
):
    texts = get_texts(db_user.language)
    await state.set_state(AdminStates.creating_poll_reward_amount)
    await callback.message.edit_text(
        texts.t(
            "ADMIN_POLLS_REWARD_AMOUNT_PROMPT",
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã –≤ —Ä—É–±–ª—è—Ö (–º–æ–∂–Ω–æ —Å –∫–æ–ø–µ–π–∫–∞–º–∏).",
        )
    )
    await callback.answer()


@admin_required
@error_handler
async def process_reward_amount(
    message: types.Message,
    db_user: User,
    state: FSMContext,
):
    texts = get_texts(db_user.language)
    raw_value = (message.text or "").replace(",", ".").strip()

    try:
        value_decimal = Decimal(raw_value)
    except (InvalidOperation, ValueError):
        await message.answer(
            texts.t(
                "ADMIN_POLLS_REWARD_AMOUNT_INVALID",
                "‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 10 –∏–ª–∏ 12.5",
            )
        )
        return

    if value_decimal < 0:
        await message.answer(
            texts.t(
                "ADMIN_POLLS_REWARD_AMOUNT_NEGATIVE",
                "‚ùóÔ∏è –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.",
            )
        )
        return

    amount_kopeks = int((value_decimal * 100).to_integral_value())
    await state.update_data(
        reward_amount_kopeks=amount_kopeks,
        reward_enabled=amount_kopeks > 0,
    )
    await state.set_state(None)

    data = await state.get_data()
    text, keyboard = _build_reward_menu(texts, data)
    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@admin_required
@error_handler
async def save_poll(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession,
):
    data = await state.get_data()
    texts = get_texts(db_user.language)

    try:
        _ensure_questions_present(_get_state_questions(data))
    except ValueError:
        await callback.answer(
            texts.t(
                "ADMIN_POLLS_NEED_QUESTION_FIRST",
                "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.",
            ),
            show_alert=True,
        )
        return

    title = data.get("poll_title")
    description = data.get("poll_description")
    questions = _get_state_questions(data)
    reward_enabled = bool(data.get("reward_enabled"))
    reward_amount = int(data.get("reward_amount_kopeks") or 0)

    if not title or not description:
        await callback.answer(
            texts.t(
                "ADMIN_POLLS_MISSING_DATA",
                "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.",
            ),
            show_alert=True,
        )
        return

    poll = Poll(
        title=title,
        description=description,
        reward_enabled=reward_enabled and reward_amount > 0,
        reward_amount_kopeks=reward_amount if reward_amount > 0 else 0,
        created_by=db_user.id,
        created_at=datetime.utcnow(),
    )

    try:
        db.add(poll)
        await db.flush()

        for q_index, question_data in enumerate(questions, start=1):
            question = PollQuestion(
                poll_id=poll.id,
                text=question_data["text"],
                order=q_index,
            )
            db.add(question)
            await db.flush()

            for opt_index, option_text in enumerate(question_data["options"], start=1):
                option = PollOption(
                    question_id=question.id,
                    text=option_text,
                    order=opt_index,
                )
                db.add(option)

        await db.commit()
        await state.clear()

        poll = await _get_poll(db, poll.id)
        question_lines = [
            _format_question_summary(idx, question)
            for idx, question in enumerate(poll.questions, start=1)
        ]
        reward_info = (
            texts.t(
                "ADMIN_POLLS_REWARD_SUMMARY",
                "üéÅ –ù–∞–≥—Ä–∞–¥–∞: {amount}",
            ).format(amount=texts.format_price(poll.reward_amount_kopeks))
            if poll.reward_enabled and poll.reward_amount_kopeks > 0
            else texts.t("ADMIN_POLLS_REWARD_SUMMARY_NONE", "üéÅ –ù–∞–≥—Ä–∞–¥–∞: –Ω–µ –≤—ã–¥–∞–µ—Ç—Å—è")
        )

        summary_text = (
            texts.t("ADMIN_POLLS_CREATED", "‚úÖ –û–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
            + "\n\n"
            + f"<b>{html.escape(poll.title)}</b>\n"
            + texts.t("ADMIN_POLLS_QUESTIONS_COUNT", "–í–æ–ø—Ä–æ—Å–æ–≤: {count}").format(count=len(poll.questions))
            + "\n"
            + reward_info
            + "\n\n"
            + "\n".join(question_lines)
        )

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=texts.t("ADMIN_POLLS_OPEN", "üìã –ö –æ–ø—Ä–æ—Å—É"),
                        callback_data=f"admin_poll_{poll.id}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text=texts.BACK,
                        callback_data="admin_polls",
                    )
                ],
            ]
        )

        await callback.message.edit_text(
            summary_text,
            reply_markup=keyboard,
            parse_mode="HTML",
        )
        await callback.answer()

    except Exception as exc:  # pragma: no cover - defensive logging
        await db.rollback()
        logger.exception("Failed to create poll: %s", exc)
        await callback.answer(
            texts.t(
                "ADMIN_POLLS_SAVE_ERROR",
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            ),
            show_alert=True,
        )


@admin_required
@error_handler
async def show_poll_details(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    try:
        poll_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer(texts.UNKNOWN_ERROR, show_alert=True)
        return

    poll = await _get_poll(db, poll_id)
    if not poll:
        await callback.answer(
            texts.t("ADMIN_POLLS_NOT_FOUND", "–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω."),
            show_alert=True,
        )
        return

    question_lines = [
        _format_question_summary(idx, question)
        for idx, question in enumerate(poll.questions, start=1)
    ]

    runs_total = sum(run.sent_count for run in poll.runs)
    completions = await db.scalar(
        select(func.count(PollResponse.id)).where(
            PollResponse.poll_id == poll.id,
            PollResponse.is_completed.is_(True),
        )
    ) or 0

    reward_info = (
        texts.t(
            "ADMIN_POLLS_REWARD_SUMMARY",
            "üéÅ –ù–∞–≥—Ä–∞–¥–∞: {amount}",
        ).format(amount=texts.format_price(poll.reward_amount_kopeks))
        if poll.reward_enabled and poll.reward_amount_kopeks > 0
        else texts.t("ADMIN_POLLS_REWARD_SUMMARY_NONE", "üéÅ –ù–∞–≥—Ä–∞–¥–∞: –Ω–µ –≤—ã–¥–∞–µ—Ç—Å—è")
    )

    description_preview = html.escape(poll.description)

    text = (
        f"üìã <b>{html.escape(poll.title)}</b>\n\n"
        + texts.t("ADMIN_POLLS_DESCRIPTION_LABEL", "–û–ø–∏—Å–∞–Ω–∏–µ:")
        + f"\n{description_preview}\n\n"
        + texts.t(
            "ADMIN_POLLS_STATS_SENT",
            "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{count}</b>",
        ).format(count=runs_total)
        + "\n"
        + texts.t(
            "ADMIN_POLLS_STATS_COMPLETED",
            "–ó–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å: <b>{count}</b>",
        ).format(count=completions)
        + "\n"
        + reward_info
        + "\n\n"
        + texts.t("ADMIN_POLLS_QUESTIONS_LIST", "–í–æ–ø—Ä–æ—Å—ã:")
        + "\n"
        + ("\n".join(question_lines) if question_lines else texts.t("ADMIN_POLLS_NO_QUESTIONS", "‚Äî –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã ‚Äî"))
    )

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_POLLS_SEND", "üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"),
                    callback_data=f"admin_poll_send_{poll.id}",
                ),
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_POLLS_STATS_BUTTON", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                    callback_data=f"admin_poll_stats_{poll.id}",
                ),
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_POLLS_DELETE", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"),
                    callback_data=f"admin_poll_delete_{poll.id}",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.BACK,
                    callback_data="admin_polls",
                )
            ],
        ]
    )

    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def show_poll_target_selection(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    try:
        poll_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer(texts.UNKNOWN_ERROR, show_alert=True)
        return

    poll = await _get_poll(db, poll_id)
    if not poll or not poll.questions:
        await callback.answer(
            texts.t(
                "ADMIN_POLLS_NO_QUESTIONS",
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –æ–ø—Ä–æ—Å—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            ),
            show_alert=True,
        )
        return

    from app.keyboards.admin import get_poll_target_keyboard

    await callback.message.edit_text(
        texts.t(
            "ADMIN_POLLS_SELECT_TARGET",
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø—Ä–æ—Å–∞.",
        ),
        reply_markup=get_poll_target_keyboard(poll.id, db_user.language),
    )
    await callback.answer()


@admin_required
@error_handler
async def preview_poll_target(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    try:
        _, _, poll_id_str, target = callback.data.split("_", 3)
        poll_id = int(poll_id_str)
    except (ValueError, IndexError):
        await callback.answer(texts.UNKNOWN_ERROR, show_alert=True)
        return

    poll = await _get_poll(db, poll_id)
    if not poll:
        await callback.answer(
            texts.t("ADMIN_POLLS_NOT_FOUND", "–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."),
            show_alert=True,
        )
        return

    users = await get_target_users(db, target)
    target_name = get_target_name(target)

    confirm_keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_POLLS_CONFIRM_SEND", "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å"),
                    callback_data=f"admin_poll_send_confirm_{poll_id}_{target}",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.BACK,
                    callback_data=f"admin_poll_send_{poll_id}",
                )
            ],
        ]
    )

    text = (
        texts.t("ADMIN_POLLS_CONFIRMATION_TITLE", "üì® –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏")
        + "\n\n"
        + texts.t(
            "ADMIN_POLLS_CONFIRMATION_BODY",
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category}</b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{count}</b>",
        ).format(category=target_name, count=len(users))
        + "\n\n"
        + texts.t(
            "ADMIN_POLLS_CONFIRMATION_HINT",
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å.",
        )
    )

    await callback.message.edit_text(
        text,
        reply_markup=confirm_keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


async def _send_poll_invitation(
    bot: types.Bot,
    poll: Poll,
    run: PollRun,
    users: list,
) -> tuple[int, int]:
    sent_count = 0
    failed_count = 0

    invite_text = (
        f"üìã <b>{html.escape(poll.title)}</b>\n\n"
        f"{poll.description}\n\n"
        "üìù –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å."
    )

    for index, user in enumerate(users, start=1):
        try:
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text="üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å",
                            callback_data=f"poll_start_{poll.id}_{run.id}",
                        )
                    ]
                ]
            )
            await bot.send_message(
                chat_id=user.telegram_id,
                text=invite_text,
                reply_markup=keyboard,
            )
            sent_count += 1
        except Exception as exc:  # pragma: no cover - defensive logging
            failed_count += 1
            logger.warning(
                "Failed to send poll %s to user %s: %s",
                poll.id,
                getattr(user, "telegram_id", "unknown"),
                exc,
            )
        if index % 25 == 0:
            await asyncio.sleep(0.5)

    return sent_count, failed_count


@admin_required
@error_handler
async def confirm_poll_sending(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    parts = callback.data.split("_")
    if len(parts) < 6:
        await callback.answer(texts.UNKNOWN_ERROR, show_alert=True)
        return

    try:
        poll_id = int(parts[4])
    except ValueError:
        await callback.answer(texts.UNKNOWN_ERROR, show_alert=True)
        return

    target = "_".join(parts[5:])

    poll = await _get_poll(db, poll_id)
    if not poll:
        await callback.answer(
            texts.t("ADMIN_POLLS_NOT_FOUND", "–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."),
            show_alert=True,
        )
        return

    users = await get_target_users(db, target)
    if not users:
        await callback.answer(
            texts.t(
                "ADMIN_POLLS_NO_USERS",
                "–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
            ),
            show_alert=True,
        )
        return

    await callback.message.edit_text(
        texts.t("ADMIN_POLLS_SENDING", "üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø—Ä–æ—Å..."),
    )

    run = PollRun(
        poll_id=poll.id,
        target_type=target,
        status="in_progress",
        total_count=len(users),
        created_by=db_user.id,
        created_at=datetime.utcnow(),
        started_at=datetime.utcnow(),
    )
    db.add(run)
    await db.flush()

    sent_count, failed_count = await _send_poll_invitation(callback.bot, poll, run, users)

    run.sent_count = sent_count
    run.failed_count = failed_count
    run.status = "completed"
    run.completed_at = datetime.utcnow()

    await db.commit()

    result_text = (
        texts.t("ADMIN_POLLS_SENT", "‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        + "\n\n"
        + texts.t("ADMIN_POLLS_SENT_SUCCESS", "–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{count}</b>").format(count=sent_count)
        + "\n"
        + texts.t("ADMIN_POLLS_SENT_FAILED", "–û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{count}</b>").format(count=failed_count)
        + "\n"
        + texts.t("ADMIN_POLLS_SENT_TOTAL", "–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{count}</b>").format(count=len(users))
    )

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_POLLS_STATS_BUTTON", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
                    callback_data=f"admin_poll_stats_{poll.id}",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.BACK,
                    callback_data=f"admin_poll_{poll.id}",
                )
            ],
        ]
    )

    await callback.message.edit_text(
        result_text,
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def show_poll_stats(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    try:
        poll_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer(texts.UNKNOWN_ERROR, show_alert=True)
        return

    poll = await _get_poll(db, poll_id)
    if not poll:
        await callback.answer(
            texts.t("ADMIN_POLLS_NOT_FOUND", "–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."),
            show_alert=True,
        )
        return

    total_responses = await db.scalar(
        select(func.count(PollResponse.id)).where(PollResponse.poll_id == poll.id)
    ) or 0
    completed_responses = await db.scalar(
        select(func.count(PollResponse.id)).where(
            PollResponse.poll_id == poll.id,
            PollResponse.is_completed.is_(True),
        )
    ) or 0
    reward_sum = await db.scalar(
        select(func.coalesce(func.sum(PollResponse.reward_amount_kopeks), 0)).where(
            PollResponse.poll_id == poll.id,
            PollResponse.reward_given.is_(True),
        )
    ) or 0

    runs_total = await db.scalar(
        select(func.coalesce(func.sum(PollRun.sent_count), 0)).where(PollRun.poll_id == poll.id)
    ) or 0

    answers_stmt = (
        select(PollAnswer.question_id, PollAnswer.option_id, func.count(PollAnswer.id))
        .join(PollResponse, PollResponse.id == PollAnswer.response_id)
        .where(PollResponse.poll_id == poll.id)
        .group_by(PollAnswer.question_id, PollAnswer.option_id)
    )
    answers_result = await db.execute(answers_stmt)
    answer_counts = {
        (question_id, option_id): count
        for question_id, option_id, count in answers_result.all()
    }

    question_lines = []
    for question in sorted(poll.questions, key=lambda q: q.order):
        total_answers_for_question = sum(
            answer_counts.get((question.id, option.id), 0)
            for option in question.options
        ) or 0
        question_lines.append(f"<b>{html.escape(question.text)}</b>")
        for option in sorted(question.options, key=lambda o: o.order):
            option_count = answer_counts.get((question.id, option.id), 0)
            percent = (
                round(option_count / total_answers_for_question * 100, 1)
                if total_answers_for_question
                else 0
            )
            question_lines.append(
                texts.t(
                    "ADMIN_POLLS_STATS_OPTION",
                    "‚Ä¢ {text} ‚Äî {count} ({percent}%)",
                ).format(
                    text=html.escape(option.text),
                    count=option_count,
                    percent=percent,
                )
            )
        question_lines.append("")

    text = (
        texts.t("ADMIN_POLLS_STATS_TITLE", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–æ—Å–∞")
        + "\n\n"
        + f"<b>{html.escape(poll.title)}</b>\n"
        + texts.t("ADMIN_POLLS_STATS_SENT", "–°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{count}</b>").format(count=runs_total)
        + "\n"
        + texts.t(
            "ADMIN_POLLS_STATS_RESPONDED",
            "–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: <b>{count}</b>",
        ).format(count=total_responses)
        + "\n"
        + texts.t(
            "ADMIN_POLLS_STATS_COMPLETED_LABEL",
            "–ü—Ä–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞: <b>{count}</b>",
        ).format(count=completed_responses)
        + "\n"
        + texts.t(
            "ADMIN_POLLS_STATS_REWARD_TOTAL",
            "–í—ã–¥–∞–Ω–æ –Ω–∞–≥—Ä–∞–¥: <b>{amount}</b>",
        ).format(amount=texts.format_price(reward_sum))
        + "\n\n"
        + ("\n".join(question_lines).strip() or texts.t("ADMIN_POLLS_STATS_NO_DATA", "–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."))
    )

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.BACK,
                    callback_data=f"admin_poll_{poll.id}",
                )
            ],
        ]
    )

    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback.answer()


@admin_required
@error_handler
async def ask_delete_poll(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    try:
        poll_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer(texts.UNKNOWN_ERROR, show_alert=True)
        return

    poll = await _get_poll(db, poll_id)
    if not poll:
        await callback.answer(
            texts.t("ADMIN_POLLS_NOT_FOUND", "–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."),
            show_alert=True,
        )
        return

    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.t("ADMIN_POLLS_DELETE_CONFIRM", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"),
                    callback_data=f"admin_poll_delete_confirm_{poll.id}",
                )
            ],
            [
                types.InlineKeyboardButton(
                    text=texts.BACK,
                    callback_data=f"admin_poll_{poll.id}",
                )
            ],
        ]
    )

    await callback.message.edit_text(
        texts.t(
            "ADMIN_POLLS_DELETE_PROMPT",
            "‚ùì –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        ),
        reply_markup=keyboard,
    )
    await callback.answer()


@admin_required
@error_handler
async def delete_poll(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    try:
        poll_id = int(callback.data.split("_")[-1])
    except (ValueError, IndexError):
        await callback.answer(texts.UNKNOWN_ERROR, show_alert=True)
        return

    poll = await db.get(Poll, poll_id)
    if not poll:
        await callback.answer(
            texts.t("ADMIN_POLLS_NOT_FOUND", "–û–ø—Ä–æ—Å —É–∂–µ —É–¥–∞–ª—ë–Ω."),
            show_alert=True,
        )
        return

    await db.delete(poll)
    await db.commit()

    await callback.message.edit_text(
        texts.t("ADMIN_POLLS_DELETED", "üóëÔ∏è –û–ø—Ä–æ—Å —É–¥–∞–ª—ë–Ω."),
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=texts.t("ADMIN_POLLS_BACK_TO_LIST", "‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –æ–ø—Ä–æ—Å–æ–≤"),
                        callback_data="admin_polls",
                    )
                ]
            ]
        ),
    )
    await callback.answer()


def register_handlers(dp: Dispatcher) -> None:
    dp.callback_query.register(show_polls_menu, F.data == "admin_polls")
    dp.callback_query.register(start_poll_creation, F.data == "admin_poll_create")
    dp.message.register(process_poll_title, AdminStates.creating_poll_title)
    dp.message.register(process_poll_description, AdminStates.creating_poll_description)
    dp.message.register(process_poll_question_text, AdminStates.creating_poll_question_text)
    dp.message.register(process_poll_question_options, AdminStates.creating_poll_question_options)
    dp.message.register(process_reward_amount, AdminStates.creating_poll_reward_amount)

    dp.callback_query.register(add_another_question, F.data == "admin_poll_add_question")
    dp.callback_query.register(show_reward_menu, F.data == "admin_poll_reward_menu")
    dp.callback_query.register(toggle_reward, F.data == "admin_poll_toggle_reward")
    dp.callback_query.register(request_reward_amount, F.data == "admin_poll_reward_amount")
    dp.callback_query.register(save_poll, F.data == "admin_poll_save")

    dp.callback_query.register(
        show_poll_details,
        F.data.regexp(r"^admin_poll_(?!send_|stats_|delete_|create).+"),
    )
    dp.callback_query.register(
        show_poll_target_selection,
        F.data.regexp(r"^admin_poll_send_\\d+$"),
    )
    dp.callback_query.register(preview_poll_target, F.data.startswith("poll_target_"))
    dp.callback_query.register(
        confirm_poll_sending,
        F.data.regexp(r"^admin_poll_send_confirm_\\d+_.+"),
    )
    dp.callback_query.register(
        show_poll_stats,
        F.data.regexp(r"^admin_poll_stats_\\d+$"),
    )
    dp.callback_query.register(
        ask_delete_poll,
        F.data.regexp(r"^admin_poll_delete_\\d+$"),
    )
    dp.callback_query.register(
        delete_poll,
        F.data.regexp(r"^admin_poll_delete_confirm_\\d+$"),
    )
