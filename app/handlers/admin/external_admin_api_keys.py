from datetime import datetime
from typing import Iterable, Tuple

from aiogram import Dispatcher, F, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.models import User
from app.localization.texts import get_texts
from app.services.external_admin_api_keys_service import (
    ExternalAdminApiKeysService,
    ExternalAdminTokenMissingError,
)
from app.states import ExternalAdminApiKeysStates
from app.utils.decorators import admin_required, error_handler


service = ExternalAdminApiKeysService()


def _format_datetime(value: datetime | None) -> str:
    if not value:
        return "‚Äî"
    try:
        return value.strftime("%d.%m.%Y %H:%M")
    except Exception:  # pragma: no cover - defensive
        return value.isoformat()


def _build_api_keys_view(
    *,
    texts,
    keys: Iterable,
) -> Tuple[str, types.InlineKeyboardMarkup]:
    keys_list = list(keys)
    lines: list[str] = [
        texts.t("ADMIN_API_KEYS_TITLE", "üîê <b>API –∫–ª—é—á–∏ –≤–Ω–µ—à–Ω–µ–π –∞–¥–º–∏–Ω–∫–∏</b>"),
        "",
        texts.t(
            "ADMIN_API_KEYS_DESCRIPTION",
            (
                "–≠—Ç–∏ –∫–ª—é—á–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                "–ö–ª—é—á —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram ID –∏ –æ–±—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞."
            ),
        ),
        "",
    ]

    if not keys_list:
        lines.append(
            texts.t(
                "ADMIN_API_KEYS_EMPTY",
                "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π.",
            )
        )
    else:
        for item in keys_list:
            api_key_value = service.build_api_key_value(item.target_telegram_id)
            created_at = _format_datetime(getattr(item, "created_at", None))
            lines.append(
                texts.t(
                    "ADMIN_API_KEYS_ITEM",
                    "‚Ä¢ <code>{telegram_id}</code> ‚Üí <code>{api_key}</code> (—Å–æ–∑–¥–∞–Ω {created_at})",
                ).format(
                    telegram_id=item.target_telegram_id,
                    api_key=api_key_value,
                    created_at=created_at,
                )
            )

    keyboard_rows: list[list[types.InlineKeyboardButton]] = [
        [
            types.InlineKeyboardButton(
                text=texts.t("ADMIN_API_KEYS_CREATE_BUTTON", "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á"),
                callback_data="admin_api_keys_create",
            )
        ]
    ]

    if keys_list:
        for item in keys_list:
            keyboard_rows.append(
                [
                    types.InlineKeyboardButton(
                        text=texts.t(
                            "ADMIN_API_KEYS_DELETE_BUTTON",
                            "üóë –£–¥–∞–ª–∏—Ç—å {telegram_id}",
                        ).format(telegram_id=item.target_telegram_id),
                        callback_data=f"admin_api_keys_delete_{item.id}",
                    )
                ]
            )

    keyboard_rows.append([
        types.InlineKeyboardButton(text=texts.BACK, callback_data="admin_submenu_settings"),
    ])

    return "\n".join(lines), types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)


def _token_missing_markup(texts) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text=texts.BACK,
                    callback_data="admin_submenu_settings",
                )
            ]
        ]
    )


@admin_required
@error_handler
async def show_api_keys(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    await state.clear()

    try:
        keys = await service.list_for_creator(db, db_user.id)
        text, keyboard = _build_api_keys_view(texts=texts, keys=keys)
    except ExternalAdminTokenMissingError:
        text = texts.t(
            "ADMIN_API_KEYS_TOKEN_MISSING",
            (
                "‚ö†Ô∏è –í–Ω–µ—à–Ω—è—è –∞–¥–º–∏–Ω–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n\n"
                "–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ EXTERNAL_ADMIN_TOKEN –≤ —Ä–∞–∑–¥–µ–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞."
            ),
        )
        keyboard = _token_missing_markup(texts)

    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@admin_required
@error_handler
async def prompt_create_api_key(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)

    try:
        await service.list_for_creator(db, db_user.id)
    except ExternalAdminTokenMissingError:
        await callback.answer(
            texts.t(
                "ADMIN_API_KEYS_TOKEN_MISSING_SHORT",
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞.",
            ),
            show_alert=True,
        )
        return

    await state.set_state(ExternalAdminApiKeysStates.waiting_for_target_id)
    await callback.message.edit_text(
        texts.t(
            "ADMIN_API_KEYS_PROMPT",
            (
                "‚úèÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ API-–∫–ª—é—á–∞</b>\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–ª—é—á.\n"
                "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π ID –∏–ª–∏ ID –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ <code>–æ—Ç–º–µ–Ω–∞</code>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            ),
        ),
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text=texts.BACK, callback_data="admin_api_keys")]]
        ),
    )
    await callback.answer()


@admin_required
@error_handler
async def delete_api_key(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)

    try:
        key_id = int(callback.data.split("_")[-1])
    except (IndexError, ValueError):
        await callback.answer(texts.t("ADMIN_API_KEYS_DELETE_ERROR", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á."), show_alert=True)
        return

    try:
        deleted = await service.delete_key(db, key_id=key_id, creator_user_id=db_user.id)
        if deleted:
            await db.commit()
            await callback.answer(
                texts.t("ADMIN_API_KEYS_DELETED", "üóë –ö–ª—é—á —É–¥–∞–ª–µ–Ω."),
            )
        else:
            await callback.answer(
                texts.t("ADMIN_API_KEYS_NOT_FOUND", "‚ö†Ô∏è –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."),
                show_alert=True,
            )
            return
    except ExternalAdminTokenMissingError:
        await callback.answer(
            texts.t(
                "ADMIN_API_KEYS_TOKEN_MISSING_SHORT",
                "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π —Ç–æ–∫–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞.",
            ),
            show_alert=True,
        )
        return

    keys = await service.list_for_creator(db, db_user.id)
    text, keyboard = _build_api_keys_view(texts=texts, keys=keys)
    await callback.message.edit_text(text, reply_markup=keyboard)


@admin_required
@error_handler
async def process_api_key_input(
    message: types.Message,
    db_user: User,
    state: FSMContext,
    db: AsyncSession,
):
    texts = get_texts(db_user.language)
    raw_value = (message.text or "").strip()

    if raw_value.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel", "/cancel"}:
        await state.clear()
        keys = await service.list_for_creator(db, db_user.id)
        text, keyboard = _build_api_keys_view(texts=texts, keys=keys)
        await message.answer(
            texts.t("ADMIN_API_KEYS_CANCELLED", "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."),
        )
        await message.answer(text, reply_markup=keyboard)
        return

    try:
        target_id = int(raw_value)
    except ValueError:
        await message.answer(
            texts.t(
                "ADMIN_API_KEYS_INVALID_ID",
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID ‚Äî —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.",
            )
        )
        return

    if target_id <= 0:
        await message.answer(
            texts.t(
                "ADMIN_API_KEYS_INVALID_ID",
                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID ‚Äî —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.",
            )
        )
        return

    try:
        result = await service.ensure_key(
            db,
            creator_user_id=db_user.id,
            target_telegram_id=target_id,
        )
        await db.commit()
    except ExternalAdminTokenMissingError:
        await message.answer(
            texts.t(
                "ADMIN_API_KEYS_TOKEN_MISSING",
                "‚ö†Ô∏è –í–Ω–µ—à–Ω—è—è –∞–¥–º–∏–Ω–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –æ–±—â–∏–π —Ç–æ–∫–µ–Ω.",
            )
        )
        await state.clear()
        return

    api_key_value = service.build_api_key_value(target_id)
    if result.created:
        response_text = texts.t(
            "ADMIN_API_KEYS_CREATED",
            "‚úÖ –ö–ª—é—á –¥–ª—è <code>{telegram_id}</code> —Å–æ–∑–¥–∞–Ω.\n\n<code>{api_key}</code>",
        ).format(telegram_id=target_id, api_key=api_key_value)
    else:
        response_text = texts.t(
            "ADMIN_API_KEYS_EXISTS",
            "‚ÑπÔ∏è –ö–ª—é—á –¥–ª—è <code>{telegram_id}</code> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n<code>{api_key}</code>",
        ).format(telegram_id=target_id, api_key=api_key_value)

    await message.answer(response_text)

    keys = await service.list_for_creator(db, db_user.id)
    text, keyboard = _build_api_keys_view(texts=texts, keys=keys)
    await message.answer(text, reply_markup=keyboard)
    await state.clear()


def register_handlers(dp: Dispatcher) -> None:
    dp.callback_query.register(
        show_api_keys,
        F.data == "admin_api_keys",
        StateFilter(None),
    )
    dp.callback_query.register(
        show_api_keys,
        F.data == "admin_api_keys",
        ExternalAdminApiKeysStates.waiting_for_target_id,
    )
    dp.callback_query.register(
        prompt_create_api_key,
        F.data == "admin_api_keys_create",
        StateFilter(None),
    )
    dp.callback_query.register(
        delete_api_key,
        F.data.startswith("admin_api_keys_delete_"),
        StateFilter(None),
    )
    dp.message.register(
        process_api_key_input,
        ExternalAdminApiKeysStates.waiting_for_target_id,
    )
