import logging
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.states import AdminStates
from app.database.models import User
from app.localization.texts import get_texts
from app.utils.decorators import admin_required, error_handler
from app.utils.validators import validate_html_tags, get_html_help_text
from app.database.crud.rules import get_current_rules_content, create_or_update_rules, clear_all_rules

logger = logging.getLogger(__name__)


@admin_required
@error_handler
async def show_rules_management(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    text = """
üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞</b>

–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    keyboard = [
        [types.InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data="admin_edit_rules")],
        [types.InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∞–≤–∏–ª", callback_data="admin_view_rules")],
        [types.InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data="admin_clear_rules")],
        [types.InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ HTML", callback_data="admin_rules_help")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_submenu_settings")]
    ]
    
    await callback.message.edit_text(
        text,
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await callback.answer()


@admin_required
@error_handler
async def view_current_rules(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    try:
        current_rules = await get_current_rules_content(db, db_user.language)
        
        is_valid, error_msg = validate_html_tags(current_rules)
        warning = ""
        if not is_valid:
            warning = f"\n\n‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í –ø—Ä–∞–≤–∏–ª–∞—Ö –Ω–∞–π–¥–µ–Ω–∞ –æ—à–∏–±–∫–∞ HTML: {error_msg}"
        
        await callback.message.edit_text(
            f"üìã <b>–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞</b>\n\n{current_rules}{warning}",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_edit_rules")],
                [types.InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data="admin_clear_rules")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_rules")]
            ])
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–∞–≤–∏–ª: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–≤–∏–ª. –í–æ–∑–º–æ–∂–Ω–æ, –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ HTML —Ç–µ–≥–∏.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data="admin_clear_rules")],
                [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_rules")]
            ])
        )
        await callback.answer()


@admin_required
@error_handler
async def start_edit_rules(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    try:
        current_rules = await get_current_rules_content(db, db_user.language)
        
        preview = current_rules[:500] + ('...' if len(current_rules) > 500 else '')
        
        text = (
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª</b>\n\n"
            f"<b>–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:</b>\n<code>{preview}</code>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–∏—Å–∞.\n\n"
            "<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML —Ä–∞–∑–º–µ—Ç–∫–∞. –í—Å–µ —Ç–µ–≥–∏ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.</i>\n\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –ù–∞–∂–º–∏—Ç–µ /html_help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚ÑπÔ∏è HTML –ø–æ–º–æ—â—å", callback_data="admin_rules_help")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_rules")]
            ])
        )
        
        await state.set_state(AdminStates.editing_rules_page)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∞–≤–∏–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", show_alert=True)


@admin_required
@error_handler
async def process_rules_edit(
    message: types.Message,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    new_rules = message.text
    
    if len(new_rules) > 4000:
        await message.answer("‚ùå –¢–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    is_valid, error_msg = validate_html_tags(new_rules)
    if not is_valid:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ HTML —Ä–∞–∑–º–µ—Ç–∫–µ:</b>\n{error_msg}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ.\n\n"
            f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /html_help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚ÑπÔ∏è HTML –ø–æ–º–æ—â—å", callback_data="admin_rules_help")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_rules")]
            ])
        )
        return
    
    try:
        preview_text = f"üìã <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª:</b>\n\n{new_rules}\n\n"
        preview_text += f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        preview_text += f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?"
        
        if len(preview_text) > 4000:
            preview_text = (
                "üìã <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª:</b>\n\n"
                f"{new_rules[:500]}...\n\n"
                f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
                f"–¢–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª: {len(new_rules)} —Å–∏–º–≤–æ–ª–æ–≤\n"
                f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?"
            )
        
        await message.answer(
            preview_text,
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="admin_save_rules"),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_rules")
                ]
            ])
        )
        
        await state.update_data(new_rules=new_rules)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–µ–≤—å—é –ø—Ä–∞–≤–∏–ª: {e}")
        await message.answer(
            "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª</b>\n\n"
            f"–ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≥–æ—Ç–æ–≤—ã –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é ({len(new_rules)} —Å–∏–º–≤–æ–ª–æ–≤).\n"
            f"HTML —Ç–µ–≥–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.\n\n"
            f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="admin_save_rules"),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_rules")
                ]
            ])
        )
        
        await state.update_data(new_rules=new_rules)


@admin_required
@error_handler
async def save_rules(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession
):
    data = await state.get_data()
    new_rules = data.get('new_rules')
    
    if not new_rules:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    is_valid, error_msg = validate_html_tags(new_rules)
    if not is_valid:
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:</b>\n{error_msg}\n\n"
            f"–ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ –≤ HTML —Ä–∞–∑–º–µ—Ç–∫–µ.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="admin_edit_rules")],
                [types.InlineKeyboardButton(text="üìã –ö –ø—Ä–∞–≤–∏–ª–∞–º", callback_data="admin_rules")]
            ])
        )
        await state.clear()
        await callback.answer()
        return
    
    try:
        await create_or_update_rules(
            db=db,
            content=new_rules,
            language=db_user.language
        )
        
        from app.localization.texts import clear_rules_cache
        clear_rules_cache()
        
        from app.localization.texts import refresh_rules_cache
        await refresh_rules_cache(db_user.language)
        
        await callback.message.edit_text(
            "‚úÖ <b>–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            "‚úì –ù–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚úì HTML —Ç–µ–≥–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n"
            "‚úì –ö–µ—à –ø—Ä–∞–≤–∏–ª –æ—á–∏—â–µ–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω\n"
            "‚úì –ü—Ä–∞–≤–∏–ª–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
            f"üìä –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞: {len(new_rules)} —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="admin_view_rules")],
                [types.InlineKeyboardButton(text="üìã –ö –ø—Ä–∞–≤–∏–ª–∞–º", callback_data="admin_rules")]
            ])
        )
        
        await state.clear()
        logger.info(f"–ü—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {db_user.telegram_id}")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="admin_save_rules")],
                [types.InlineKeyboardButton(text="üìã –ö –ø—Ä–∞–≤–∏–ª–∞–º", callback_data="admin_rules")]
            ])
        )
        await callback.answer()


@admin_required
@error_handler
async def clear_rules_confirmation(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    await callback.message.edit_text(
        "üóëÔ∏è <b>–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–∏—Å–∞</b>\n\n"
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–∏—Å–∞.\n\n"
        "–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [
                types.InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="admin_confirm_clear_rules"),
                types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_rules")
            ]
        ])
    )
    await callback.answer()


@admin_required
@error_handler
async def confirm_clear_rules(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    try:
        await clear_all_rules(db, db_user.language)
        
        from app.localization.texts import clear_rules_cache
        clear_rules_cache()
        
        await callback.message.edit_text(
            "‚úÖ <b>–ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!</b>\n\n"
            "‚úì –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —É–¥–∞–ª–µ–Ω—ã\n"
            "‚úì –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞\n"
            "‚úì –ö–µ—à –ø—Ä–∞–≤–∏–ª –æ—á–∏—â–µ–Ω\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ", callback_data="admin_edit_rules")],
                [types.InlineKeyboardButton(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ", callback_data="admin_view_rules")],
                [types.InlineKeyboardButton(text="üìã –ö –ø—Ä–∞–≤–∏–ª–∞–º", callback_data="admin_rules")]
            ])
        )
        
        logger.info(f"–ü—Ä–∞–≤–∏–ª–∞ –æ—á–∏—â–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {db_user.telegram_id}")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–∞–≤–∏–ª: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–∞–≤–∏–ª", show_alert=True)


@admin_required
@error_handler
async def show_html_help(
    callback: types.CallbackQuery,
    db_user: User,
    db: AsyncSession
):
    help_text = get_html_help_text()
    
    await callback.message.edit_text(
        f"‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é</b>\n\n{help_text}",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞", callback_data="admin_edit_rules")],
            [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_rules")]
        ])
    )
    await callback.answer()


def register_handlers(dp: Dispatcher):
    dp.callback_query.register(show_rules_management, F.data == "admin_rules")
    dp.callback_query.register(view_current_rules, F.data == "admin_view_rules")
    dp.callback_query.register(start_edit_rules, F.data == "admin_edit_rules")
    dp.callback_query.register(save_rules, F.data == "admin_save_rules")
    
    dp.callback_query.register(clear_rules_confirmation, F.data == "admin_clear_rules")
    dp.callback_query.register(confirm_clear_rules, F.data == "admin_confirm_clear_rules")
    
    dp.callback_query.register(show_html_help, F.data == "admin_rules_help")
    
    dp.message.register(process_rules_edit, AdminStates.editing_rules_page)