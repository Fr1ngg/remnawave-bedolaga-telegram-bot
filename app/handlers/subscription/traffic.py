import base64
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Tuple, Optional
from urllib.parse import quote
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from app.config import settings, PERIOD_PRICES, get_traffic_prices
from app.database.crud.discount_offer import (
    get_offer_by_id,
    mark_offer_claimed,
)
from app.database.crud.promo_offer_template import get_promo_offer_template_by_id
from app.database.crud.subscription import (
    create_trial_subscription,
    create_paid_subscription, add_subscription_traffic, add_subscription_devices,
    update_subscription_autopay
)
from app.database.crud.transaction import create_transaction
from app.database.crud.user import subtract_user_balance
from app.database.models import (
    User, TransactionType, SubscriptionStatus,
    Subscription
)
from app.keyboards.inline import (
    get_subscription_keyboard, get_trial_keyboard,
    get_subscription_period_keyboard, get_traffic_packages_keyboard,
    get_countries_keyboard, get_devices_keyboard,
    get_subscription_confirm_keyboard, get_autopay_keyboard,
    get_autopay_days_keyboard, get_back_keyboard,
    get_add_traffic_keyboard,
    get_change_devices_keyboard, get_reset_traffic_confirm_keyboard,
    get_manage_countries_keyboard,
    get_device_selection_keyboard, get_connection_guide_keyboard,
    get_app_selection_keyboard, get_specific_app_keyboard,
    get_updated_subscription_settings_keyboard, get_insufficient_balance_keyboard,
    get_extend_subscription_keyboard_with_prices, get_confirm_change_devices_keyboard,
    get_devices_management_keyboard, get_device_management_help_keyboard,
    get_happ_cryptolink_keyboard,
    get_happ_download_platform_keyboard, get_happ_download_link_keyboard,
    get_happ_download_button_row,
    get_payment_methods_keyboard_with_cart,
    get_subscription_confirm_keyboard_with_cart,
    get_insufficient_balance_keyboard_with_cart
)
from app.localization.texts import get_texts
from app.services.admin_notification_service import AdminNotificationService
from app.services.remnawave_service import RemnaWaveService
from app.services.subscription_checkout_service import (
    clear_subscription_checkout_draft,
    get_subscription_checkout_draft,
    save_subscription_checkout_draft,
    should_offer_checkout_resume,
)
from app.services.subscription_service import SubscriptionService
from app.utils.miniapp_buttons import build_miniapp_or_callback_button
from app.services.promo_offer_service import promo_offer_service
from app.states import SubscriptionStates
from app.utils.pagination import paginate_list
from app.utils.pricing_utils import (
    calculate_months_from_days,
    get_remaining_months,
    calculate_prorated_price,
    validate_pricing_calculation,
    format_period_description,
    apply_percentage_discount,
)
from app.utils.subscription_utils import (
    get_display_subscription_link,
    get_happ_cryptolink_redirect_link,
    convert_subscription_link_to_happ_scheme,
)
from app.utils.promo_offer import (
    build_promo_offer_hint,
    get_user_active_promo_discount_percent,
)

from .common import _apply_addon_discount, _get_addon_discount_percent_for_user, _get_period_hint_from_subscription, get_confirm_switch_traffic_keyboard, get_traffic_switch_keyboard, logger
from .countries import _get_available_countries, _should_show_countries_management

async def handle_add_traffic(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    from app.config import settings

    texts = get_texts(db_user.language)

    if settings.is_traffic_fixed():
        await callback.answer(
            texts.t(
                "TRAFFIC_FIXED_MODE",
                "‚ö†Ô∏è –í —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ —Ç—Ä–∞—Ñ–∏–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω",
            ),
            show_alert=True,
        )
        return

    subscription = db_user.subscription

    if not subscription or subscription.is_trial:
        await callback.answer(
            texts.t("PAID_FEATURE_ONLY", "‚ö† –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"),
            show_alert=True,
        )
        return

    if subscription.traffic_limit_gb == 0:
        await callback.answer(
            texts.t("TRAFFIC_ALREADY_UNLIMITED", "‚ö† –£ –≤–∞—Å —É–∂–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫"),
            show_alert=True,
        )
        return

    current_traffic = subscription.traffic_limit_gb
    period_hint_days = _get_period_hint_from_subscription(subscription)
    traffic_discount_percent = _get_addon_discount_percent_for_user(
        db_user,
        "traffic",
        period_hint_days,
    )

    prompt_text = texts.t(
        "ADD_TRAFFIC_PROMPT",
        (
            "üìà <b>–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –∫ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
            "–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {current_traffic}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫:"
        ),
    ).format(current_traffic=texts.format_traffic(current_traffic))

    await callback.message.edit_text(
        prompt_text,
        reply_markup=get_add_traffic_keyboard(
            db_user.language,
            subscription.end_date,
            traffic_discount_percent,
        ),
        parse_mode="HTML"
    )

    await callback.answer()

async def handle_reset_traffic(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    from app.config import settings

    if settings.is_traffic_fixed():
        await callback.answer("‚ö†Ô∏è –í —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ —Ç—Ä–∞—Ñ–∏–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–±—Ä–æ—à–µ–Ω", show_alert=True)
        return

    texts = get_texts(db_user.language)
    subscription = db_user.subscription

    if not subscription or subscription.is_trial:
        await callback.answer("‚åõ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫", show_alert=True)
        return

    if subscription.traffic_limit_gb == 0:
        await callback.answer("‚åõ –£ –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫", show_alert=True)
        return

    reset_price = PERIOD_PRICES[30]

    if db_user.balance_kopeks < reset_price:
        await callback.answer("‚åõ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ", show_alert=True)
        return

    await callback.message.edit_text(
        f"üîÑ <b>–°–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞</b>\n\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {texts.format_traffic(subscription.traffic_used_gb)}\n"
        f"–õ–∏–º–∏—Ç: {texts.format_traffic(subscription.traffic_limit_gb)}\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–±—Ä–æ—Å–∞: {texts.format_price(reset_price)}\n\n"
        "–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å—Ç–∞–Ω–µ—Ç —Ä–∞–≤–Ω—ã–º 0.",
        reply_markup=get_reset_traffic_confirm_keyboard(reset_price, db_user.language)
    )

    await callback.answer()

async def confirm_reset_traffic(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    from app.config import settings

    if settings.is_traffic_fixed():
        await callback.answer("‚ö†Ô∏è –í —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ —Ç—Ä–∞—Ñ–∏–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", show_alert=True)
        return

    texts = get_texts(db_user.language)
    subscription = db_user.subscription

    reset_price = PERIOD_PRICES[30]

    if db_user.balance_kopeks < reset_price:
        missing_kopeks = reset_price - db_user.balance_kopeks
        message_text = texts.t(
            "ADDON_INSUFFICIENT_FUNDS_MESSAGE",
            (
                "‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
                "–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {required}\n"
                "–ù–∞ –±–∞–ª–∞–Ω—Å–µ: {balance}\n"
                "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {missing}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –°—É–º–º–∞ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            ),
        ).format(
            required=texts.format_price(reset_price),
            balance=texts.format_price(db_user.balance_kopeks),
            missing=texts.format_price(missing_kopeks),
        )

        await callback.message.edit_text(
            message_text,
            reply_markup=get_insufficient_balance_keyboard(
                db_user.language,
                amount_kopeks=missing_kopeks,
            ),
            parse_mode="HTML",
        )
        await callback.answer()
        return

    try:
        success = await subtract_user_balance(
            db, db_user, reset_price,
            "–°–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞"
        )

        if not success:
            await callback.answer("‚åõ –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
            return

        subscription.traffic_used_gb = 0.0
        subscription.updated_at = datetime.utcnow()
        await db.commit()

        subscription_service = SubscriptionService()
        remnawave_service = RemnaWaveService()

        user = db_user
        if user.remnawave_uuid:
            async with remnawave_service.get_api_client() as api:
                await api.reset_user_traffic(user.remnawave_uuid)

        await create_transaction(
            db=db,
            user_id=db_user.id,
            type=TransactionType.SUBSCRIPTION_PAYMENT,
            amount_kopeks=reset_price,
            description="–°–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞"
        )

        await db.refresh(db_user)
        await db.refresh(subscription)

        await callback.message.edit_text(
            f"‚úÖ –¢—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!\n\n"
            f"üîÑ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –æ–±–Ω—É–ª–µ–Ω\n"
            f"üìä –õ–∏–º–∏—Ç: {texts.format_traffic(subscription.traffic_limit_gb)}",
            reply_markup=get_back_keyboard(db_user.language)
        )

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.telegram_id} —Å–±—Ä–æ—Å–∏–ª —Ç—Ä–∞—Ñ–∏–∫")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞: {e}")
        await callback.message.edit_text(
            texts.ERROR,
            reply_markup=get_back_keyboard(db_user.language)
        )

    await callback.answer()

async def refresh_traffic_config():
    try:
        from app.config import refresh_traffic_prices
        refresh_traffic_prices()

        packages = settings.get_traffic_packages()
        enabled_count = sum(1 for pkg in packages if pkg['enabled'])

        logger.info(f"üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {enabled_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤")
        for pkg in packages:
            if pkg['enabled']:
                gb_text = "‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç" if pkg['gb'] == 0 else f"{pkg['gb']} –ì–ë"
                logger.info(f"   üì¶ {gb_text}: {pkg['price'] / 100}‚ÇΩ")

        return True

    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞: {e}")
        return False

async def get_traffic_packages_info() -> str:
    try:
        packages = settings.get_traffic_packages()

        info_lines = ["üì¶ –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —Ç—Ä–∞—Ñ–∏–∫–∞:"]

        enabled_packages = [pkg for pkg in packages if pkg['enabled']]
        disabled_packages = [pkg for pkg in packages if not pkg['enabled']]

        if enabled_packages:
            info_lines.append("\n‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ:")
            for pkg in enabled_packages:
                gb_text = "‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç" if pkg['gb'] == 0 else f"{pkg['gb']} –ì–ë"
                info_lines.append(f"   ‚Ä¢ {gb_text}: {pkg['price'] // 100}‚ÇΩ")

        if disabled_packages:
            info_lines.append("\n‚ùå –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ:")
            for pkg in disabled_packages:
                gb_text = "‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç" if pkg['gb'] == 0 else f"{pkg['gb']} –ì–ë"
                info_lines.append(f"   ‚Ä¢ {gb_text}: {pkg['price'] // 100}‚ÇΩ")

        info_lines.append(f"\nüìä –í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤: {len(packages)}")
        info_lines.append(f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(enabled_packages)}")
        info_lines.append(f"üî¥ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö: {len(disabled_packages)}")

        return "\n".join(info_lines)

    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"

async def select_traffic(
        callback: types.CallbackQuery,
        state: FSMContext,
        db_user: User
):
    traffic_gb = int(callback.data.split('_')[1])
    texts = get_texts(db_user.language)

    data = await state.get_data()
    data['traffic_gb'] = traffic_gb

    traffic_price = settings.get_traffic_price(traffic_gb)
    data['total_price'] += traffic_price

    await state.set_data(data)

    if await _should_show_countries_management(db_user):
        countries = await _get_available_countries(db_user.promo_group_id)
        await callback.message.edit_text(
            texts.SELECT_COUNTRIES,
            reply_markup=get_countries_keyboard(countries, [], db_user.language)
        )
        await state.set_state(SubscriptionStates.selecting_countries)
    else:
        countries = await _get_available_countries(db_user.promo_group_id)
        available_countries = [c for c in countries if c.get('is_available', True)]
        data['countries'] = [available_countries[0]['uuid']] if available_countries else []
        await state.set_data(data)

        selected_devices = data.get('devices', settings.DEFAULT_DEVICE_LIMIT)

        await callback.message.edit_text(
            texts.SELECT_DEVICES,
            reply_markup=get_devices_keyboard(selected_devices, db_user.language)
        )
        await state.set_state(SubscriptionStates.selecting_devices)

    await callback.answer()

async def add_traffic(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    if settings.is_traffic_fixed():
        await callback.answer("‚ö†Ô∏è –í —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ —Ç—Ä–∞—Ñ–∏–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", show_alert=True)
        return

    traffic_gb = int(callback.data.split('_')[2])
    texts = get_texts(db_user.language)
    subscription = db_user.subscription

    base_price = settings.get_traffic_price(traffic_gb)

    if base_price == 0 and traffic_gb != 0:
        await callback.answer("‚ö†Ô∏è –¶–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞", show_alert=True)
        return

    period_hint_days = _get_period_hint_from_subscription(subscription)
    discount_result = _apply_addon_discount(
        db_user,
        "traffic",
        base_price,
        period_hint_days,
    )

    discounted_per_month = discount_result["discounted"]
    discount_per_month = discount_result["discount"]
    charged_months = 1

    if subscription:
        price, charged_months = calculate_prorated_price(
            discounted_per_month,
            subscription.end_date,
        )
    else:
        price = discounted_per_month

    total_discount_value = discount_per_month * charged_months

    if db_user.balance_kopeks < price:
        missing_kopeks = price - db_user.balance_kopeks
        message_text = texts.t(
            "ADDON_INSUFFICIENT_FUNDS_MESSAGE",
            (
                "‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
                "–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {required}\n"
                "–ù–∞ –±–∞–ª–∞–Ω—Å–µ: {balance}\n"
                "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {missing}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –°—É–º–º–∞ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            ),
        ).format(
            required=texts.format_price(price),
            balance=texts.format_price(db_user.balance_kopeks),
            missing=texts.format_price(missing_kopeks),
        )

        await callback.message.edit_text(
            message_text,
            reply_markup=get_insufficient_balance_keyboard(
                db_user.language,
                amount_kopeks=missing_kopeks,
            ),
            parse_mode="HTML",
        )
        await callback.answer()
        return

    try:
        success = await subtract_user_balance(
            db,
            db_user,
            price,
            f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {traffic_gb} –ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞",
        )

        if not success:
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
            return

        if traffic_gb == 0:
            subscription.traffic_limit_gb = 0
        else:
            await add_subscription_traffic(db, subscription, traffic_gb)

        subscription_service = SubscriptionService()
        await subscription_service.update_remnawave_user(db, subscription)

        await create_transaction(
            db=db,
            user_id=db_user.id,
            type=TransactionType.SUBSCRIPTION_PAYMENT,
            amount_kopeks=price,
            description=f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {traffic_gb} –ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞",
        )

        await db.refresh(db_user)
        await db.refresh(subscription)

        success_text = f"‚úÖ –¢—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        if traffic_gb == 0:
            success_text += "üéâ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫!"
        else:
            success_text += f"üìà –î–æ–±–∞–≤–ª–µ–Ω–æ: {traffic_gb} –ì–ë\n"
            success_text += f"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {texts.format_traffic(subscription.traffic_limit_gb)}"

        if price > 0:
            success_text += f"\nüí∞ –°–ø–∏—Å–∞–Ω–æ: {texts.format_price(price)}"
            if total_discount_value > 0:
                success_text += (
                    f" (—Å–∫–∏–¥–∫–∞ {discount_result['percent']}%:"
                    f" -{texts.format_price(total_discount_value)})"
                )

        await callback.message.edit_text(
            success_text,
            reply_markup=get_back_keyboard(db_user.language)
        )

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.telegram_id} –¥–æ–±–∞–≤–∏–ª {traffic_gb} –ì–ë —Ç—Ä–∞—Ñ–∏–∫–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞: {e}")
        await callback.message.edit_text(
            texts.ERROR,
            reply_markup=get_back_keyboard(db_user.language)
        )

    await callback.answer()

async def handle_no_traffic_packages(
        callback: types.CallbackQuery,
        db_user: User
):
    await callback.answer(
        "‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞. "
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
        show_alert=True
    )

async def handle_switch_traffic(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    from app.config import settings

    if settings.is_traffic_fixed():
        await callback.answer("‚ö†Ô∏è –í —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ —Ç—Ä–∞—Ñ–∏–∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", show_alert=True)
        return

    texts = get_texts(db_user.language)
    subscription = db_user.subscription

    if not subscription or subscription.is_trial:
        await callback.answer("‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫", show_alert=True)
        return

    current_traffic = subscription.traffic_limit_gb
    period_hint_days = _get_period_hint_from_subscription(subscription)
    traffic_discount_percent = _get_addon_discount_percent_for_user(
        db_user,
        "traffic",
        period_hint_days,
    )

    await callback.message.edit_text(
        f"üîÑ <b>–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {texts.format_traffic(current_traffic)}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:\n\n"
        f"üí° <b>–í–∞–∂–Ω–æ:</b>\n"
        f"‚Ä¢ –ü—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ - –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ —Ä–∞–∑–Ω–∏—Ü—É\n"
        f"‚Ä¢ –ü—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ - –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è",
        reply_markup=get_traffic_switch_keyboard(
            current_traffic,
            db_user.language,
            subscription.end_date,
            traffic_discount_percent,
        ),
        parse_mode="HTML"
    )

    await callback.answer()

async def confirm_switch_traffic(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    new_traffic_gb = int(callback.data.split('_')[2])
    texts = get_texts(db_user.language)
    subscription = db_user.subscription

    current_traffic = subscription.traffic_limit_gb

    if new_traffic_gb == current_traffic:
        await callback.answer("‚ÑπÔ∏è –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è", show_alert=True)
        return

    old_price_per_month = settings.get_traffic_price(current_traffic)
    new_price_per_month = settings.get_traffic_price(new_traffic_gb)

    months_remaining = get_remaining_months(subscription.end_date)
    period_hint_days = months_remaining * 30 if months_remaining > 0 else None
    traffic_discount_percent = _get_addon_discount_percent_for_user(
        db_user,
        "traffic",
        period_hint_days,
    )

    discounted_old_per_month, _ = apply_percentage_discount(
        old_price_per_month,
        traffic_discount_percent,
    )
    discounted_new_per_month, _ = apply_percentage_discount(
        new_price_per_month,
        traffic_discount_percent,
    )
    price_difference_per_month = discounted_new_per_month - discounted_old_per_month
    discount_savings_per_month = (
            (new_price_per_month - old_price_per_month) - price_difference_per_month
    )

    if price_difference_per_month > 0:
        total_price_difference = price_difference_per_month * months_remaining

        if db_user.balance_kopeks < total_price_difference:
            missing_kopeks = total_price_difference - db_user.balance_kopeks
            message_text = texts.t(
                "ADDON_INSUFFICIENT_FUNDS_MESSAGE",
                (
                    "‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {required}\n"
                    "–ù–∞ –±–∞–ª–∞–Ω—Å–µ: {balance}\n"
                    "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {missing}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –°—É–º–º–∞ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                ),
            ).format(
                required=f"{texts.format_price(total_price_difference)} (–∑–∞ {months_remaining} –º–µ—Å)",
                balance=texts.format_price(db_user.balance_kopeks),
                missing=texts.format_price(missing_kopeks),
            )

            await callback.message.edit_text(
                message_text,
                reply_markup=get_insufficient_balance_keyboard(
                    db_user.language,
                    amount_kopeks=missing_kopeks,
                ),
                parse_mode="HTML",
            )
            await callback.answer()
            return

        action_text = f"—É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ {texts.format_traffic(new_traffic_gb)}"
        cost_text = f"–î–æ–ø–ª–∞—Ç–∞: {texts.format_price(total_price_difference)} (–∑–∞ {months_remaining} –º–µ—Å)"
        if discount_savings_per_month > 0:
            total_discount_savings = discount_savings_per_month * months_remaining
            cost_text += (
                f" (—Å–∫–∏–¥–∫–∞ {traffic_discount_percent}%:"
                f" -{texts.format_price(total_discount_savings)})"
            )
    else:
        total_price_difference = 0
        action_text = f"—É–º–µ–Ω—å—à–∏—Ç—å –¥–æ {texts.format_traffic(new_traffic_gb)}"
        cost_text = "–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è"

    confirm_text = f"üîÑ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞</b>\n\n"
    confirm_text += f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {texts.format_traffic(current_traffic)}\n"
    confirm_text += f"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {texts.format_traffic(new_traffic_gb)}\n\n"
    confirm_text += f"–î–µ–π—Å—Ç–≤–∏–µ: {action_text}\n"
    confirm_text += f"üí∞ {cost_text}\n\n"
    confirm_text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ?"

    await callback.message.edit_text(
        confirm_text,
        reply_markup=get_confirm_switch_traffic_keyboard(new_traffic_gb, total_price_difference, db_user.language),
        parse_mode="HTML"
    )

    await callback.answer()

async def execute_switch_traffic(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    callback_parts = callback.data.split('_')
    new_traffic_gb = int(callback_parts[3])
    price_difference = int(callback_parts[4])

    texts = get_texts(db_user.language)
    subscription = db_user.subscription
    current_traffic = subscription.traffic_limit_gb

    try:
        if price_difference > 0:
            success = await subtract_user_balance(
                db, db_user, price_difference,
                f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å {current_traffic}GB –Ω–∞ {new_traffic_gb}GB"
            )

            if not success:
                await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
                return

            months_remaining = get_remaining_months(subscription.end_date)
            await create_transaction(
                db=db,
                user_id=db_user.id,
                type=TransactionType.SUBSCRIPTION_PAYMENT,
                amount_kopeks=price_difference,
                description=f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ —Å {current_traffic}GB –Ω–∞ {new_traffic_gb}GB –Ω–∞ {months_remaining} –º–µ—Å"
            )

        subscription.traffic_limit_gb = new_traffic_gb
        subscription.updated_at = datetime.utcnow()

        await db.commit()

        subscription_service = SubscriptionService()
        await subscription_service.update_remnawave_user(db, subscription)

        await db.refresh(db_user)
        await db.refresh(subscription)

        try:
            from app.services.admin_notification_service import AdminNotificationService
            notification_service = AdminNotificationService(callback.bot)
            await notification_service.send_subscription_update_notification(
                db, db_user, subscription, "traffic", current_traffic, new_traffic_gb, price_difference
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞: {e}")

        if new_traffic_gb > current_traffic:
            success_text = f"‚úÖ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω!\n\n"
            success_text += f"üìä –ë—ã–ª–æ: {texts.format_traffic(current_traffic)} ‚Üí "
            success_text += f"–°—Ç–∞–ª–æ: {texts.format_traffic(new_traffic_gb)}\n"
            if price_difference > 0:
                success_text += f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {texts.format_price(price_difference)}"
        elif new_traffic_gb < current_traffic:
            success_text = f"‚úÖ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ —É–º–µ–Ω—å—à–µ–Ω!\n\n"
            success_text += f"üìä –ë—ã–ª–æ: {texts.format_traffic(current_traffic)} ‚Üí "
            success_text += f"–°—Ç–∞–ª–æ: {texts.format_traffic(new_traffic_gb)}\n"
            success_text += f"‚ÑπÔ∏è –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è"

        await callback.message.edit_text(
            success_text,
            reply_markup=get_back_keyboard(db_user.language)
        )

        logger.info(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.telegram_id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª —Ç—Ä–∞—Ñ–∏–∫ —Å {current_traffic}GB –Ω–∞ {new_traffic_gb}GB, –¥–æ–ø–ª–∞—Ç–∞: {price_difference / 100}‚ÇΩ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞: {e}")
        await callback.message.edit_text(
            texts.ERROR,
            reply_markup=get_back_keyboard(db_user.language)
        )

    await callback.answer()
