import base64
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Tuple, Optional
from urllib.parse import quote
from aiogram import Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession
from app.config import settings, PERIOD_PRICES, get_traffic_prices
from app.database.crud.discount_offer import (
    get_offer_by_id,
    mark_offer_claimed,
)
from app.database.crud.promo_offer_template import get_promo_offer_template_by_id
from app.database.crud.subscription import (
    create_trial_subscription,
    create_paid_subscription, add_subscription_traffic, add_subscription_devices,
    update_subscription_autopay
)
from app.database.crud.transaction import create_transaction
from app.database.crud.user import subtract_user_balance
from app.database.models import (
    User, TransactionType, SubscriptionStatus,
    Subscription
)
from app.keyboards.inline import (
    get_subscription_keyboard, get_trial_keyboard,
    get_subscription_period_keyboard, get_traffic_packages_keyboard,
    get_countries_keyboard, get_devices_keyboard,
    get_subscription_confirm_keyboard, get_autopay_keyboard,
    get_autopay_days_keyboard, get_back_keyboard,
    get_add_traffic_keyboard,
    get_change_devices_keyboard, get_reset_traffic_confirm_keyboard,
    get_manage_countries_keyboard,
    get_device_selection_keyboard, get_connection_guide_keyboard,
    get_app_selection_keyboard, get_specific_app_keyboard,
    get_updated_subscription_settings_keyboard, get_insufficient_balance_keyboard,
    get_extend_subscription_keyboard_with_prices, get_confirm_change_devices_keyboard,
    get_devices_management_keyboard, get_device_management_help_keyboard,
    get_happ_cryptolink_keyboard,
    get_happ_download_platform_keyboard, get_happ_download_link_keyboard,
    get_happ_download_button_row,
    get_payment_methods_keyboard_with_cart,
    get_subscription_confirm_keyboard_with_cart,
    get_insufficient_balance_keyboard_with_cart
)
from app.localization.texts import get_texts
from app.services.admin_notification_service import AdminNotificationService
from app.services.remnawave_service import RemnaWaveService
from app.services.subscription_checkout_service import (
    clear_subscription_checkout_draft,
    get_subscription_checkout_draft,
    save_subscription_checkout_draft,
    should_offer_checkout_resume,
)
from app.services.subscription_service import SubscriptionService
from app.utils.miniapp_buttons import build_miniapp_or_callback_button
from app.services.promo_offer_service import promo_offer_service
from app.states import SubscriptionStates
from app.utils.pagination import paginate_list
from app.utils.pricing_utils import (
    calculate_months_from_days,
    get_remaining_months,
    calculate_prorated_price,
    validate_pricing_calculation,
    format_period_description,
    apply_percentage_discount,
)
from app.utils.subscription_utils import (
    get_display_subscription_link,
    get_happ_cryptolink_redirect_link,
    convert_subscription_link_to_happ_scheme,
)
from app.utils.promo_offer import (
    build_promo_offer_hint,
    get_user_active_promo_discount_percent,
)

from .common import _get_addon_discount_percent_for_user, _get_period_hint_from_subscription, format_additional_section, get_apps_for_device, get_device_name, get_step_description, logger
from .countries import _get_available_countries

async def get_current_devices_detailed(db_user: User) -> dict:
    try:
        if not db_user.remnawave_uuid:
            return {"count": 0, "devices": []}

        from app.services.remnawave_service import RemnaWaveService
        service = RemnaWaveService()

        async with service.get_api_client() as api:
            response = await api._make_request('GET', f'/api/hwid/devices/{db_user.remnawave_uuid}')

            if response and 'response' in response:
                devices_info = response['response']
                total_devices = devices_info.get('total', 0)
                devices_list = devices_info.get('devices', [])

                return {
                    "count": total_devices,
                    "devices": devices_list[:5]
                }
            else:
                return {"count": 0, "devices": []}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö: {e}")
        return {"count": 0, "devices": []}

async def get_servers_display_names(squad_uuids: List[str]) -> str:
    if not squad_uuids:
        return "–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤"

    try:
        from app.database.database import AsyncSessionLocal
        from app.database.crud.server_squad import get_server_squad_by_uuid

        server_names = []

        async with AsyncSessionLocal() as db:
            for uuid in squad_uuids:
                server = await get_server_squad_by_uuid(db, uuid)
                if server:
                    server_names.append(server.display_name)
                    logger.debug(f"–ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä –≤ –ë–î: {uuid} -> {server.display_name}")
                else:
                    logger.warning(f"–°–µ—Ä–≤–µ—Ä —Å UUID {uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")

        if not server_names:
            countries = await _get_available_countries()
            for uuid in squad_uuids:
                for country in countries:
                    if country['uuid'] == uuid:
                        server_names.append(country['name'])
                        logger.debug(f"–ù–∞–π–¥–µ–Ω —Å–µ—Ä–≤–µ—Ä –≤ –∫—ç—à–µ: {uuid} -> {country['name']}")
                        break

        if not server_names:
            if len(squad_uuids) == 1:
                return "üéØ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä"
            return f"{len(squad_uuids)} —Å—Ç—Ä–∞–Ω"

        if len(server_names) > 6:
            displayed = ", ".join(server_names[:6])
            remaining = len(server_names) - 6
            return f"{displayed} –∏ –µ—â—ë {remaining}"
        else:
            return ", ".join(server_names)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–æ–≤: {e}")
        if len(squad_uuids) == 1:
            return "üéØ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä"
        return f"{len(squad_uuids)} —Å—Ç—Ä–∞–Ω"

async def get_current_devices_count(db_user: User) -> str:
    try:
        if not db_user.remnawave_uuid:
            return "‚Äî"

        from app.services.remnawave_service import RemnaWaveService
        service = RemnaWaveService()

        async with service.get_api_client() as api:
            response = await api._make_request('GET', f'/api/hwid/devices/{db_user.remnawave_uuid}')

            if response and 'response' in response:
                total_devices = response['response'].get('total', 0)
                return str(total_devices)
            else:
                return "‚Äî"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return "‚Äî"

async def handle_change_devices(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    texts = get_texts(db_user.language)
    subscription = db_user.subscription

    if not settings.is_devices_selection_enabled():
        await callback.answer(
            texts.t(
                "DEVICES_SELECTION_DISABLED",
                "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            ),
            show_alert=True,
        )
        return

    if not subscription or subscription.is_trial:
        await callback.answer(
            texts.t("PAID_FEATURE_ONLY", "‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"),
            show_alert=True,
        )
        return

    current_devices = subscription.device_limit

    period_hint_days = _get_period_hint_from_subscription(subscription)
    devices_discount_percent = _get_addon_discount_percent_for_user(
        db_user,
        "devices",
        period_hint_days,
    )

    prompt_text = texts.t(
        "CHANGE_DEVICES_PROMPT",
        (
            "üì± <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b>\n\n"
            "–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {current_devices} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:\n\n"
            "üí° <b>–í–∞–∂–Ω–æ:</b>\n"
            "‚Ä¢ –ü—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ - –¥–æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è –≤—Ä–µ–º–µ–Ω–∏\n"
            "‚Ä¢ –ü—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ - –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è"
        ),
    ).format(current_devices=current_devices)

    await callback.message.edit_text(
        prompt_text,
        reply_markup=get_change_devices_keyboard(
            current_devices,
            db_user.language,
            subscription.end_date,
            devices_discount_percent,
        ),
        parse_mode="HTML"
    )

    await callback.answer()

async def confirm_change_devices(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    new_devices_count = int(callback.data.split('_')[2])
    texts = get_texts(db_user.language)
    subscription = db_user.subscription

    if not settings.is_devices_selection_enabled():
        await callback.answer(
            texts.t(
                "DEVICES_SELECTION_DISABLED",
                "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            ),
            show_alert=True,
        )
        return

    current_devices = subscription.device_limit

    if new_devices_count == current_devices:
        await callback.answer(
            texts.t("DEVICES_NO_CHANGE", "‚ÑπÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å"),
            show_alert=True,
        )
        return

    if settings.MAX_DEVICES_LIMIT > 0 and new_devices_count > settings.MAX_DEVICES_LIMIT:
        await callback.answer(
            texts.t(
                "DEVICES_LIMIT_EXCEEDED",
                "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ({limit})",
            ).format(limit=settings.MAX_DEVICES_LIMIT),
            show_alert=True
        )
        return

    devices_difference = new_devices_count - current_devices

    if devices_difference > 0:
        additional_devices = devices_difference

        if current_devices < settings.DEFAULT_DEVICE_LIMIT:
            free_devices = settings.DEFAULT_DEVICE_LIMIT - current_devices
            chargeable_devices = max(0, additional_devices - free_devices)
        else:
            chargeable_devices = additional_devices

        devices_price_per_month = chargeable_devices * settings.PRICE_PER_DEVICE
        months_hint = get_remaining_months(subscription.end_date)
        period_hint_days = months_hint * 30 if months_hint > 0 else None
        devices_discount_percent = _get_addon_discount_percent_for_user(
            db_user,
            "devices",
            period_hint_days,
        )
        discounted_per_month, discount_per_month = apply_percentage_discount(
            devices_price_per_month,
            devices_discount_percent,
        )
        price, charged_months = calculate_prorated_price(
            discounted_per_month,
            subscription.end_date,
        )
        total_discount = discount_per_month * charged_months

        if price > 0 and db_user.balance_kopeks < price:
            missing_kopeks = price - db_user.balance_kopeks
            required_text = f"{texts.format_price(price)} (–∑–∞ {charged_months} –º–µ—Å)"
            message_text = texts.t(
                "ADDON_INSUFFICIENT_FUNDS_MESSAGE",
                (
                    "‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
                    "–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {required}\n"
                    "–ù–∞ –±–∞–ª–∞–Ω—Å–µ: {balance}\n"
                    "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {missing}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –°—É–º–º–∞ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
                ),
            ).format(
                required=required_text,
                balance=texts.format_price(db_user.balance_kopeks),
                missing=texts.format_price(missing_kopeks),
            )

            await callback.message.answer(
                message_text,
                reply_markup=get_insufficient_balance_keyboard(
                    db_user.language,
                    amount_kopeks=missing_kopeks,
                ),
                parse_mode="HTML",
            )
            await callback.answer()
            return

        action_text = texts.t(
            "DEVICE_CHANGE_ACTION_INCREASE",
            "—É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ {count}",
        ).format(count=new_devices_count)
        if price > 0:
            cost_text = texts.t(
                "DEVICE_CHANGE_EXTRA_COST",
                "–î–æ–ø–ª–∞—Ç–∞: {amount} (–∑–∞ {months} –º–µ—Å)",
            ).format(
                amount=texts.format_price(price),
                months=charged_months,
            )
            if total_discount > 0:
                cost_text += texts.t(
                    "DEVICE_CHANGE_DISCOUNT_INFO",
                    " (—Å–∫–∏–¥–∫–∞ {percent}%: -{amount})",
                ).format(
                    percent=devices_discount_percent,
                    amount=texts.format_price(total_discount),
                )
        else:
            cost_text = texts.t("DEVICE_CHANGE_FREE", "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ")

    else:
        price = 0
        action_text = texts.t(
            "DEVICE_CHANGE_ACTION_DECREASE",
            "—É–º–µ–Ω—å—à–∏—Ç—å –¥–æ {count}",
        ).format(count=new_devices_count)
        cost_text = texts.t("DEVICE_CHANGE_NO_REFUND", "–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è")

    confirm_text = texts.t(
        "DEVICE_CHANGE_CONFIRMATION",
        (
            "üì± <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è</b>\n\n"
            "–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {current} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
            "–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n\n"
            "–î–µ–π—Å—Ç–≤–∏–µ: {action}\n"
            "üí∞ {cost}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ?"
        ),
    ).format(
        current=current_devices,
        new=new_devices_count,
        action=action_text,
        cost=cost_text,
    )

    await callback.message.edit_text(
        confirm_text,
        reply_markup=get_confirm_change_devices_keyboard(new_devices_count, price, db_user.language),
        parse_mode="HTML"
    )

    await callback.answer()

async def execute_change_devices(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    callback_parts = callback.data.split('_')
    new_devices_count = int(callback_parts[3])
    price = int(callback_parts[4])

    texts = get_texts(db_user.language)
    subscription = db_user.subscription
    current_devices = subscription.device_limit

    if not settings.is_devices_selection_enabled():
        await callback.answer(
            texts.t(
                "DEVICES_SELECTION_DISABLED",
                "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            ),
            show_alert=True,
        )
        return

    try:
        if price > 0:
            success = await subtract_user_balance(
                db, db_user, price,
                f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å {current_devices} –¥–æ {new_devices_count}"
            )

            if not success:
                await callback.answer(
                    texts.t("PAYMENT_CHARGE_ERROR", "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤"),
                    show_alert=True,
                )
                return

            charged_months = get_remaining_months(subscription.end_date)
            await create_transaction(
                db=db,
                user_id=db_user.id,
                type=TransactionType.SUBSCRIPTION_PAYMENT,
                amount_kopeks=price,
                description=f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å {current_devices} –¥–æ {new_devices_count} –Ω–∞ {charged_months} –º–µ—Å"
            )

        subscription.device_limit = new_devices_count
        subscription.updated_at = datetime.utcnow()

        await db.commit()

        subscription_service = SubscriptionService()
        await subscription_service.update_remnawave_user(db, subscription)

        await db.refresh(db_user)
        await db.refresh(subscription)

        try:
            from app.services.admin_notification_service import AdminNotificationService
            notification_service = AdminNotificationService(callback.bot)
            await notification_service.send_subscription_update_notification(
                db, db_user, subscription, "devices", current_devices, new_devices_count, price
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")

        if new_devices_count > current_devices:
            success_text = texts.t(
                "DEVICE_CHANGE_INCREASE_SUCCESS",
                "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–≤–µ–ª–∏—á–µ–Ω–æ!\n\n",
            )
            success_text += texts.t(
                "DEVICE_CHANGE_RESULT_LINE",
                "üì± –ë—ã–ª–æ: {old} ‚Üí –°—Ç–∞–ª–æ: {new}\n",
            ).format(old=current_devices, new=new_devices_count)
            if price > 0:
                success_text += texts.t(
                    "DEVICE_CHANGE_CHARGED",
                    "üí∞ –°–ø–∏—Å–∞–Ω–æ: {amount}",
                ).format(amount=texts.format_price(price))
        else:
            success_text = texts.t(
                "DEVICE_CHANGE_DECREASE_SUCCESS",
                "‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —É–º–µ–Ω—å—à–µ–Ω–æ!\n\n",
            )
            success_text += texts.t(
                "DEVICE_CHANGE_RESULT_LINE",
                "üì± –ë—ã–ª–æ: {old} ‚Üí –°—Ç–∞–ª–æ: {new}\n",
            ).format(old=current_devices, new=new_devices_count)
            success_text += texts.t(
                "DEVICE_CHANGE_NO_REFUND_INFO",
                "‚ÑπÔ∏è –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è",
            )

        await callback.message.edit_text(
            success_text,
            reply_markup=get_back_keyboard(db_user.language)
        )

        logger.info(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.telegram_id} –∏–∑–º–µ–Ω–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å {current_devices} –Ω–∞ {new_devices_count}, –¥–æ–ø–ª–∞—Ç–∞: {price / 100}‚ÇΩ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        await callback.message.edit_text(
            texts.ERROR,
            reply_markup=get_back_keyboard(db_user.language)
        )

    await callback.answer()

async def handle_device_management(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    texts = get_texts(db_user.language)
    subscription = db_user.subscription

    if not subscription or subscription.is_trial:
        await callback.answer(
            texts.t("PAID_FEATURE_ONLY", "‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"),
            show_alert=True,
        )
        return

    if not db_user.remnawave_uuid:
        await callback.answer(
            texts.t("DEVICE_UUID_NOT_FOUND", "‚ùå UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"),
            show_alert=True,
        )
        return

    try:
        from app.services.remnawave_service import RemnaWaveService
        service = RemnaWaveService()

        async with service.get_api_client() as api:
            response = await api._make_request('GET', f'/api/hwid/devices/{db_user.remnawave_uuid}')

            if response and 'response' in response:
                devices_info = response['response']
                total_devices = devices_info.get('total', 0)
                devices_list = devices_info.get('devices', [])

                if total_devices == 0:
                    await callback.message.edit_text(
                        texts.t("DEVICE_NONE_CONNECTED", "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"),
                        reply_markup=get_back_keyboard(db_user.language)
                    )
                    await callback.answer()
                    return

                await show_devices_page(callback, db_user, devices_list, page=1)
            else:
                await callback.answer(
                    texts.t(
                        "DEVICE_FETCH_INFO_ERROR",
                        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö",
                    ),
                    show_alert=True,
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        await callback.answer(
            texts.t(
                "DEVICE_FETCH_INFO_ERROR",
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö",
            ),
            show_alert=True,
        )

    await callback.answer()

async def show_devices_page(
        callback: types.CallbackQuery,
        db_user: User,
        devices_list: List[dict],
        page: int = 1
):
    texts = get_texts(db_user.language)
    devices_per_page = 5

    pagination = paginate_list(devices_list, page=page, per_page=devices_per_page)

    devices_text = texts.t(
        "DEVICE_MANAGEMENT_OVERVIEW",
        (
            "üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏</b>\n\n"
            "üìä –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {total} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
            "üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {pages}\n\n"
        ),
    ).format(total=len(devices_list), page=pagination.page, pages=pagination.total_pages)

    if pagination.items:
        devices_text += texts.t(
            "DEVICE_MANAGEMENT_CONNECTED_HEADER",
            "<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b>\n",
        )
        for i, device in enumerate(pagination.items, 1):
            platform = device.get('platform', 'Unknown')
            device_model = device.get('deviceModel', 'Unknown')
            device_info = f"{platform} - {device_model}"

            if len(device_info) > 35:
                device_info = device_info[:32] + "..."

            devices_text += texts.t(
                "DEVICE_MANAGEMENT_LIST_ITEM",
                "‚Ä¢ {device}\n",
            ).format(device=device_info)

    devices_text += texts.t(
        "DEVICE_MANAGEMENT_ACTIONS",
        (
            "\nüí° <b>–î–µ–π—Å—Ç–≤–∏—è:</b>\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è —Å–±—Ä–æ—Å–∞\n"
            "‚Ä¢ –ò–ª–∏ —Å–±—Ä–æ—Å—å—Ç–µ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å—Ä–∞–∑—É"
        ),
    )

    await callback.message.edit_text(
        devices_text,
        reply_markup=get_devices_management_keyboard(
            pagination.items,
            pagination,
            db_user.language
        ),
        parse_mode="HTML"
    )

async def handle_devices_page(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    page = int(callback.data.split('_')[2])
    texts = get_texts(db_user.language)

    try:
        from app.services.remnawave_service import RemnaWaveService
        service = RemnaWaveService()

        async with service.get_api_client() as api:
            response = await api._make_request('GET', f'/api/hwid/devices/{db_user.remnawave_uuid}')

            if response and 'response' in response:
                devices_list = response['response'].get('devices', [])
                await show_devices_page(callback, db_user, devices_list, page=page)
            else:
                await callback.answer(
                    texts.t("DEVICE_FETCH_ERROR", "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"),
                    show_alert=True,
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        await callback.answer(
            texts.t("DEVICE_PAGE_LOAD_ERROR", "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
            show_alert=True,
        )

async def handle_single_device_reset(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    try:
        callback_parts = callback.data.split('_')
        if len(callback_parts) < 4:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback.data}")
            await callback.answer(
                texts.t("DEVICE_RESET_INVALID_REQUEST", "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"),
                show_alert=True,
            )
            return

        device_index = int(callback_parts[2])
        page = int(callback_parts[3])

        logger.info(f"üîß –°–±—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: index={device_index}, page={page}")

    except (ValueError, IndexError) as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data {callback.data}: {e}")
        await callback.answer(
            texts.t("DEVICE_RESET_PARSE_ERROR", "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"),
            show_alert=True,
        )
        return

    texts = get_texts(db_user.language)

    try:
        from app.services.remnawave_service import RemnaWaveService
        service = RemnaWaveService()

        async with service.get_api_client() as api:
            response = await api._make_request('GET', f'/api/hwid/devices/{db_user.remnawave_uuid}')

            if response and 'response' in response:
                devices_list = response['response'].get('devices', [])

                devices_per_page = 5
                pagination = paginate_list(devices_list, page=page, per_page=devices_per_page)

                if device_index < len(pagination.items):
                    device = pagination.items[device_index]
                    device_hwid = device.get('hwid')

                    if device_hwid:
                        delete_data = {
                            "userUuid": db_user.remnawave_uuid,
                            "hwid": device_hwid
                        }

                        await api._make_request('POST', '/api/hwid/devices/delete', data=delete_data)

                        platform = device.get('platform', 'Unknown')
                        device_model = device.get('deviceModel', 'Unknown')
                        device_info = f"{platform} - {device_model}"

                        await callback.answer(
                            texts.t(
                                "DEVICE_RESET_SUCCESS",
                                "‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–æ!",
                            ).format(device=device_info),
                            show_alert=True,
                        )

                        updated_response = await api._make_request('GET', f'/api/hwid/devices/{db_user.remnawave_uuid}')
                        if updated_response and 'response' in updated_response:
                            updated_devices = updated_response['response'].get('devices', [])

                            if updated_devices:
                                updated_pagination = paginate_list(updated_devices, page=page,
                                                                   per_page=devices_per_page)
                                if not updated_pagination.items and page > 1:
                                    page = page - 1

                                await show_devices_page(callback, db_user, updated_devices, page=page)
                            else:
                                await callback.message.edit_text(
                                    texts.t(
                                        "DEVICE_RESET_ALL_DONE",
                                        "‚ÑπÔ∏è –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å–±—Ä–æ—à–µ–Ω—ã",
                                    ),
                                    reply_markup=get_back_keyboard(db_user.language)
                                )

                        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.telegram_id} —Å–±—Ä–æ—Å–∏–ª —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_info}")
                    else:
                        await callback.answer(
                            texts.t(
                                "DEVICE_RESET_ID_FAILED",
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞",
                            ),
                            show_alert=True,
                        )
                else:
                    await callback.answer(
                        texts.t("DEVICE_RESET_NOT_FOUND", "‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"),
                        show_alert=True,
                    )
            else:
                await callback.answer(
                    texts.t("DEVICE_FETCH_ERROR", "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"),
                    show_alert=True,
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
        await callback.answer(
            texts.t("DEVICE_RESET_ERROR", "‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"),
            show_alert=True,
        )

async def handle_all_devices_reset_from_management(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    texts = get_texts(db_user.language)

    if not db_user.remnawave_uuid:
        await callback.answer(
            texts.t("DEVICE_UUID_NOT_FOUND", "‚ùå UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω"),
            show_alert=True,
        )
        return

    try:
        from app.services.remnawave_service import RemnaWaveService
        service = RemnaWaveService()

        async with service.get_api_client() as api:
            devices_response = await api._make_request('GET', f'/api/hwid/devices/{db_user.remnawave_uuid}')

            if not devices_response or 'response' not in devices_response:
                await callback.answer(
                    texts.t(
                        "DEVICE_LIST_FETCH_ERROR",
                        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤",
                    ),
                    show_alert=True,
                )
                return

            devices_list = devices_response['response'].get('devices', [])

            if not devices_list:
                await callback.answer(
                    texts.t("DEVICE_NONE_CONNECTED", "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"),
                    show_alert=True,
                )
                return

            logger.info(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(devices_list)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞")

            success_count = 0
            failed_count = 0

            for device in devices_list:
                device_hwid = device.get('hwid')
                if device_hwid:
                    try:
                        delete_data = {
                            "userUuid": db_user.remnawave_uuid,
                            "hwid": device_hwid
                        }

                        await api._make_request('POST', '/api/hwid/devices/delete', data=delete_data)
                        success_count += 1
                        logger.info(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_hwid} —É–¥–∞–ª–µ–Ω–æ")

                    except Exception as device_error:
                        failed_count += 1
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_hwid}: {device_error}")
                else:
                    failed_count += 1
                    logger.warning(f"‚ö†Ô∏è –£ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ—Ç HWID: {device}")

            if success_count > 0:
                if failed_count == 0:
                    await callback.message.edit_text(
                        texts.t(
                            "DEVICE_RESET_ALL_SUCCESS_MESSAGE",
                            (
                                "‚úÖ <b>–í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!</b>\n\n"
                                "üîÑ –°–±—Ä–æ—à–µ–Ω–æ: {count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
                                "üì± –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–Ω–æ–≤–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n\n"
                                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
                            ),
                        ).format(count=success_count),
                        reply_markup=get_back_keyboard(db_user.language),
                        parse_mode="HTML"
                    )
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.telegram_id} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—Å–∏–ª {success_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                else:
                    await callback.message.edit_text(
                        texts.t(
                            "DEVICE_RESET_PARTIAL_MESSAGE",
                            (
                                "‚ö†Ô∏è <b>–ß–∞—Å—Ç–∏—á–Ω—ã–π —Å–±—Ä–æ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤</b>\n\n"
                                "‚úÖ –£–¥–∞–ª–µ–Ω–æ: {success} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
                                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: {failed} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n\n"
                                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                            ),
                        ).format(success=success_count, failed=failed_count),
                        reply_markup=get_back_keyboard(db_user.language),
                        parse_mode="HTML"
                    )
                    logger.warning(
                        f"‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω—ã–π —Å–±—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user.telegram_id}: {success_count}/{len(devices_list)}")
            else:
                await callback.message.edit_text(
                    texts.t(
                        "DEVICE_RESET_ALL_FAILED_MESSAGE",
                        (
                            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</b>\n\n"
                            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n"
                            "–í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {total}"
                        ),
                    ).format(total=len(devices_list)),
                    reply_markup=get_back_keyboard(db_user.language),
                    parse_mode="HTML"
                )
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user.telegram_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        await callback.message.edit_text(
            texts.ERROR,
            reply_markup=get_back_keyboard(db_user.language)
        )

    await callback.answer()

async def confirm_add_devices(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    devices_count = int(callback.data.split('_')[2])
    texts = get_texts(db_user.language)
    subscription = db_user.subscription

    if not settings.is_devices_selection_enabled():
        await callback.answer(
            texts.t(
                "DEVICES_SELECTION_DISABLED",
                "‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
            ),
            show_alert=True,
        )
        return

    resume_callback = None

    new_total_devices = subscription.device_limit + devices_count

    if settings.MAX_DEVICES_LIMIT > 0 and new_total_devices > settings.MAX_DEVICES_LIMIT:
        await callback.answer(
            f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ({settings.MAX_DEVICES_LIMIT}). "
            f"–£ –≤–∞—Å: {subscription.device_limit}, –¥–æ–±–∞–≤–ª—è–µ—Ç–µ: {devices_count}",
            show_alert=True
        )
        return

    devices_price_per_month = devices_count * settings.PRICE_PER_DEVICE
    months_hint = get_remaining_months(subscription.end_date)
    period_hint_days = months_hint * 30 if months_hint > 0 else None
    devices_discount_percent = _get_addon_discount_percent_for_user(
        db_user,
        "devices",
        period_hint_days,
    )
    discounted_per_month, discount_per_month = apply_percentage_discount(
        devices_price_per_month,
        devices_discount_percent,
    )
    price, charged_months = calculate_prorated_price(
        discounted_per_month,
        subscription.end_date,
    )
    total_discount = discount_per_month * charged_months

    logger.info(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ %s —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %.2f‚ÇΩ/–º–µ—Å √ó %s –º–µ—Å = %.2f‚ÇΩ (—Å–∫–∏–¥–∫–∞ %.2f‚ÇΩ)",
        devices_count,
        discounted_per_month / 100,
        charged_months,
        price / 100,
        total_discount / 100,
    )

    if db_user.balance_kopeks < price:
        missing_kopeks = price - db_user.balance_kopeks
        required_text = f"{texts.format_price(price)} (–∑–∞ {charged_months} –º–µ—Å)"
        message_text = texts.t(
            "ADDON_INSUFFICIENT_FUNDS_MESSAGE",
            (
                "‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
                "–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {required}\n"
                "–ù–∞ –±–∞–ª–∞–Ω—Å–µ: {balance}\n"
                "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {missing}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –°—É–º–º–∞ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            ),
        ).format(
            required=required_text,
            balance=texts.format_price(db_user.balance_kopeks),
            missing=texts.format_price(missing_kopeks),
        )

        await callback.message.edit_text(
            message_text,
            reply_markup=get_insufficient_balance_keyboard(
                db_user.language,
                resume_callback=resume_callback,
                amount_kopeks=missing_kopeks,
            ),
            parse_mode="HTML",
        )
        await callback.answer()
        return

    try:
        success = await subtract_user_balance(
            db, db_user, price,
            f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {devices_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ {charged_months} –º–µ—Å"
        )

        if not success:
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤", show_alert=True)
            return

        await add_subscription_devices(db, subscription, devices_count)

        subscription_service = SubscriptionService()
        await subscription_service.update_remnawave_user(db, subscription)

        await create_transaction(
            db=db,
            user_id=db_user.id,
            type=TransactionType.SUBSCRIPTION_PAYMENT,
            amount_kopeks=price,
            description=f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ {devices_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ {charged_months} –º–µ—Å"
        )

        await db.refresh(db_user)
        await db.refresh(subscription)

        success_text = (
            "‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\n"
            f"üì± –î–æ–±–∞–≤–ª–µ–Ω–æ: {devices_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
            f"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {subscription.device_limit} —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n"
        )
        success_text += f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {texts.format_price(price)} (–∑–∞ {charged_months} –º–µ—Å)"
        if total_discount > 0:
            success_text += (
                f" (—Å–∫–∏–¥–∫–∞ {devices_discount_percent}%:"
                f" -{texts.format_price(total_discount)})"
            )

        await callback.message.edit_text(
            success_text,
            reply_markup=get_back_keyboard(db_user.language)
        )

        logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.telegram_id} –¥–æ–±–∞–≤–∏–ª {devices_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞ {price / 100}‚ÇΩ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        await callback.message.edit_text(
            texts.ERROR,
            reply_markup=get_back_keyboard(db_user.language)
        )

    await callback.answer()

async def handle_reset_devices(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    await handle_device_management(callback, db_user, db)

async def confirm_reset_devices(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    await handle_device_management(callback, db_user, db)

async def handle_device_guide(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    device_type = callback.data.split('_')[2]
    texts = get_texts(db_user.language)
    subscription = db_user.subscription
    subscription_link = get_display_subscription_link(subscription)

    if not subscription_link:
        await callback.answer(
            texts.t("SUBSCRIPTION_LINK_UNAVAILABLE", "‚ùå –°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"),
            show_alert=True,
        )
        return

    apps = get_apps_for_device(device_type, db_user.language)
    hide_subscription_link = settings.should_hide_subscription_link()

    if not apps:
        await callback.answer(
            texts.t("SUBSCRIPTION_DEVICE_APPS_NOT_FOUND", "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"),
            show_alert=True,
        )
        return

    featured_app = next((app for app in apps if app.get('isFeatured', False)), apps[0])
    featured_app_id = featured_app.get('id')
    other_apps = [
        app for app in apps
        if isinstance(app, dict) and app.get('id') and app.get('id') != featured_app_id
    ]

    other_app_names = ", ".join(
        str(app.get('name')).strip()
        for app in other_apps
        if isinstance(app.get('name'), str) and app.get('name').strip()
    )

    if hide_subscription_link:
        link_section = (
                texts.t("SUBSCRIPTION_DEVICE_LINK_TITLE", "üîó <b>–°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>")
                + "\n"
                + texts.t(
            "SUBSCRIPTION_LINK_HIDDEN_NOTICE",
            "‚ÑπÔ∏è –°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ –∏–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞\".",
        )
                + "\n\n"
        )
    else:
        link_section = (
                texts.t("SUBSCRIPTION_DEVICE_LINK_TITLE", "üîó <b>–°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>")
                + f"\n<code>{subscription_link}</code>\n\n"
        )

    installation_description = get_step_description(featured_app, "installationStep", db_user.language)
    add_description = get_step_description(featured_app, "addSubscriptionStep", db_user.language)
    connect_description = get_step_description(featured_app, "connectAndUseStep", db_user.language)
    additional_before_text = format_additional_section(
        featured_app.get("additionalBeforeAddSubscriptionStep"),
        texts,
        db_user.language,
    )
    additional_after_text = format_additional_section(
        featured_app.get("additionalAfterAddSubscriptionStep"),
        texts,
        db_user.language,
    )

    guide_text = (
            texts.t(
                "SUBSCRIPTION_DEVICE_GUIDE_TITLE",
                "üì± <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è {device_name}</b>",
            ).format(device_name=get_device_name(device_type, db_user.language))
            + "\n\n"
            + link_section
            + texts.t(
        "SUBSCRIPTION_DEVICE_FEATURED_APP",
        "üìã <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b> {app_name}",
    ).format(app_name=featured_app.get('name', ''))
    )

    if other_app_names:
        guide_text += "\n\n" + texts.t(
            "SUBSCRIPTION_DEVICE_OTHER_APPS",
            "üì¶ <b>–î—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b> {app_list}",
        ).format(app_list=other_app_names)
        guide_text += "\n" + texts.t(
            "SUBSCRIPTION_DEVICE_OTHER_APPS_HINT",
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–î—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\" –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
        )

    guide_text += "\n\n" + texts.t("SUBSCRIPTION_DEVICE_STEP_INSTALL_TITLE", "<b>–®–∞–≥ 1 - –£—Å—Ç–∞–Ω–æ–≤–∫–∞:</b>")
    if installation_description:
        guide_text += f"\n{installation_description}"

    if additional_before_text:
        guide_text += f"\n\n{additional_before_text}"

    guide_text += "\n\n" + texts.t("SUBSCRIPTION_DEVICE_STEP_ADD_TITLE", "<b>–®–∞–≥ 2 - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>")
    if add_description:
        guide_text += f"\n{add_description}"

    guide_text += "\n\n" + texts.t("SUBSCRIPTION_DEVICE_STEP_CONNECT_TITLE", "<b>–®–∞–≥ 3 - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b>")
    if connect_description:
        guide_text += f"\n{connect_description}"

    guide_text += "\n\n" + texts.t("SUBSCRIPTION_DEVICE_HOW_TO_TITLE", "üí° <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å:</b>")
    guide_text += "\n" + "\n".join(
        [
            texts.t(
                "SUBSCRIPTION_DEVICE_HOW_TO_STEP1",
                "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ",
            ),
            texts.t(
                "SUBSCRIPTION_DEVICE_HOW_TO_STEP2",
                "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è\" –Ω–∏–∂–µ",
            ),
            texts.t(
                "SUBSCRIPTION_DEVICE_HOW_TO_STEP3",
                "3. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É",
            ),
            texts.t(
                "SUBSCRIPTION_DEVICE_HOW_TO_STEP4",
                "4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É",
            ),
        ]
    )

    if additional_after_text:
        guide_text += f"\n\n{additional_after_text}"

    await callback.message.edit_text(
        guide_text,
        reply_markup=get_connection_guide_keyboard(
            subscription_link,
            featured_app,
            device_type,
            db_user.language,
            has_other_apps=bool(other_apps),
        ),
        parse_mode="HTML"
    )
    await callback.answer()

async def handle_app_selection(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    device_type = callback.data.split('_')[2]
    texts = get_texts(db_user.language)
    subscription = db_user.subscription

    apps = get_apps_for_device(device_type, db_user.language)

    if not apps:
        await callback.answer(
            texts.t("SUBSCRIPTION_DEVICE_APPS_NOT_FOUND", "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"),
            show_alert=True,
        )
        return

    app_text = (
            texts.t(
                "SUBSCRIPTION_APPS_TITLE",
                "üì± <b>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {device_name}</b>",
            ).format(device_name=get_device_name(device_type, db_user.language))
            + "\n\n"
            + texts.t("SUBSCRIPTION_APPS_PROMPT", "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    )

    await callback.message.edit_text(
        app_text,
        reply_markup=get_app_selection_keyboard(device_type, apps, db_user.language),
        parse_mode="HTML"
    )
    await callback.answer()

async def handle_specific_app_guide(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    _, device_type, app_id = callback.data.split('_')
    texts = get_texts(db_user.language)
    subscription = db_user.subscription

    subscription_link = get_display_subscription_link(subscription)

    if not subscription_link:
        await callback.answer(
            texts.t("SUBSCRIPTION_LINK_UNAVAILABLE", "‚ùå –°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"),
            show_alert=True,
        )
        return

    apps = get_apps_for_device(device_type, db_user.language)
    app = next((a for a in apps if a['id'] == app_id), None)

    if not app:
        await callback.answer(
            texts.t("SUBSCRIPTION_APP_NOT_FOUND", "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"),
            show_alert=True,
        )
        return

    hide_subscription_link = settings.should_hide_subscription_link()

    if hide_subscription_link:
        link_section = (
                texts.t("SUBSCRIPTION_DEVICE_LINK_TITLE", "üîó <b>–°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>")
                + "\n"
                + texts.t(
            "SUBSCRIPTION_LINK_HIDDEN_NOTICE",
            "‚ÑπÔ∏è –°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ –∏–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞\".",
        )
                + "\n\n"
        )
    else:
        link_section = (
                texts.t("SUBSCRIPTION_DEVICE_LINK_TITLE", "üîó <b>–°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>")
                + f"\n<code>{subscription_link}</code>\n\n"
        )

    installation_description = get_step_description(app, "installationStep", db_user.language)
    add_description = get_step_description(app, "addSubscriptionStep", db_user.language)
    connect_description = get_step_description(app, "connectAndUseStep", db_user.language)
    additional_before_text = format_additional_section(
        app.get("additionalBeforeAddSubscriptionStep"),
        texts,
        db_user.language,
    )
    additional_after_text = format_additional_section(
        app.get("additionalAfterAddSubscriptionStep"),
        texts,
        db_user.language,
    )

    guide_text = (
            texts.t(
                "SUBSCRIPTION_SPECIFIC_APP_TITLE",
                "üì± <b>{app_name} - {device_name}</b>",
            ).format(app_name=app.get('name', ''), device_name=get_device_name(device_type, db_user.language))
            + "\n\n"
            + link_section
    )

    guide_text += texts.t("SUBSCRIPTION_DEVICE_STEP_INSTALL_TITLE", "<b>–®–∞–≥ 1 - –£—Å—Ç–∞–Ω–æ–≤–∫–∞:</b>")
    if installation_description:
        guide_text += f"\n{installation_description}"

    if additional_before_text:
        guide_text += f"\n\n{additional_before_text}"

    guide_text += "\n\n" + texts.t("SUBSCRIPTION_DEVICE_STEP_ADD_TITLE", "<b>–®–∞–≥ 2 - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>")
    if add_description:
        guide_text += f"\n{add_description}"

    guide_text += "\n\n" + texts.t("SUBSCRIPTION_DEVICE_STEP_CONNECT_TITLE", "<b>–®–∞–≥ 3 - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:</b>")
    if connect_description:
        guide_text += f"\n{connect_description}"

    if additional_after_text:
        guide_text += f"\n\n{additional_after_text}"

    await callback.message.edit_text(
        guide_text,
        reply_markup=get_specific_app_keyboard(
            subscription_link,
            app,
            device_type,
            db_user.language
        ),
        parse_mode="HTML"
    )
    await callback.answer()

async def show_device_connection_help(
        callback: types.CallbackQuery,
        db_user: User,
        db: AsyncSession
):
    subscription = db_user.subscription
    subscription_link = get_display_subscription_link(subscription)

    if not subscription_link:
        await callback.answer("‚ùå –°—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return

    help_text = f"""
üì± <b>–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ</b>

–ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–∞–º –Ω—É–∂–Ω–æ:

<b>1. –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏:</b>
üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞"

<b>2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à–µ VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –ù–∞–π–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É" –∏–ª–∏ "Import"
‚Ä¢ –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É

<b>3. –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:</b>
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–∫–ª—é—á–∏—Ç—å"

<b>üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:</b>
<code>{subscription_link}</code>

üí° <b>–°–æ–≤–µ—Ç:</b> –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É - –æ–Ω–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
"""

    await callback.message.edit_text(
        help_text,
        reply_markup=get_device_management_help_keyboard(db_user.language),
        parse_mode="HTML"
    )
    await callback.answer()
