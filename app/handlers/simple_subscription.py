"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
import logging
from typing import Optional, Dict, Any
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.models import User
from app.keyboards.inline import get_back_keyboard, get_happ_download_button_row
from app.localization.texts import get_texts
from app.services.payment_service import PaymentService
from app.services.subscription_purchase_service import SubscriptionPurchaseService
from app.utils.decorators import error_handler
from app.states import SubscriptionStates
from app.utils.subscription_utils import get_display_subscription_link

logger = logging.getLogger(__name__)


@error_handler
async def start_simple_subscription_purchase(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession,
):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    texts = get_texts(db_user.language)
    
    if not settings.SIMPLE_SUBSCRIPTION_ENABLED:
        await callback.answer("‚ùå –ü—Ä–æ—Å—Ç–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    from app.database.crud.subscription import get_subscription_by_user_id
    current_subscription = await get_subscription_by_user_id(db, db_user.id)
    
    if current_subscription and current_subscription.is_active:
        await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", show_alert=True)
        return
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_params = {
        "period_days": settings.SIMPLE_SUBSCRIPTION_PERIOD_DAYS,
        "device_limit": settings.SIMPLE_SUBSCRIPTION_DEVICE_LIMIT,
        "traffic_limit_gb": settings.SIMPLE_SUBSCRIPTION_TRAFFIC_GB,
        "squad_uuid": settings.SIMPLE_SUBSCRIPTION_SQUAD_UUID
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(subscription_params=subscription_params)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balance_kopeks = getattr(db_user, "balance_kopeks", 0)
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
    price_kopeks = _calculate_simple_subscription_price(subscription_params)
    period_days = subscription_params["period_days"]
    recorded_price = getattr(settings, f"PRICE_{period_days}_DAYS", price_kopeks)
    direct_purchase_min_balance = recorded_price
    extra_components = []
    traffic_limit = subscription_params.get("traffic_limit_gb", 0)
    if traffic_limit and traffic_limit > 0:
        traffic_price = settings.get_traffic_price(traffic_limit)
        direct_purchase_min_balance += traffic_price
        extra_components.append(f"traffic={traffic_limit}GB->{traffic_price}")

    device_limit = subscription_params.get("device_limit", 1)
    if device_limit and device_limit > settings.DEFAULT_DEVICE_LIMIT:
        additional_devices = device_limit - settings.DEFAULT_DEVICE_LIMIT
        devices_price = additional_devices * settings.PRICE_PER_DEVICE
        direct_purchase_min_balance += devices_price
        extra_components.append(f"devices+{additional_devices}->{devices_price}")
    logger.warning(
        "SIMPLE_SUBSCRIPTION_DEBUG_START | user=%s | period=%s | base_price=%s | recorded_price=%s | extras=%s | total=%s | env_PRICE_30=%s",
        db_user.id,
        period_days,
        price_kopeks,
        recorded_price,
        ",".join(extra_components) if extra_components else "none",
        direct_purchase_min_balance,
        getattr(settings, "PRICE_30_DAYS", None),
    )

    can_pay_from_balance = user_balance_kopeks >= direct_purchase_min_balance
    logger.warning(
        "SIMPLE_SUBSCRIPTION_DEBUG_START_BALANCE | user=%s | balance=%s | min_required=%s | can_pay=%s",
        db_user.id,
        user_balance_kopeks,
        direct_purchase_min_balance,
        can_pay_from_balance,
    )

    message_text = (
        f"‚ö° <b>–ü—Ä–æ—Å—Ç–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {subscription_params['period_days']} –¥–Ω–µ–π\n"
        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {subscription_params['device_limit']}\n"
        f"üìä –¢—Ä–∞—Ñ–∏–∫: {'–ë–µ–∑–ª–∏–º–∏—Ç' if subscription_params['traffic_limit_gb'] == 0 else f'{subscription_params['traffic_limit_gb']} –ì–ë'}\n"
        f"üåç –°–µ—Ä–≤–µ—Ä: {'–õ—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π' if not subscription_params['squad_uuid'] else '–í—ã–±—Ä–∞–Ω–Ω—ã–π'}\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {settings.format_price(price_kopeks)}\n"
        f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {settings.format_price(user_balance_kopeks)}\n\n"
        + (
            "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã."
            if can_pay_from_balance
            else "–ë–∞–ª–∞–Ω—Å –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        )
    )

    methods_keyboard = _get_simple_subscription_payment_keyboard(db_user.language)
    keyboard_rows = []

    if can_pay_from_balance:
        keyboard_rows.append([
            types.InlineKeyboardButton(
                text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞",
                callback_data="simple_subscription_pay_with_balance",
            )
        ])

    keyboard_rows.extend(methods_keyboard.inline_keyboard)

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await state.set_state(SubscriptionStates.waiting_for_simple_subscription_payment_method)
    await callback.answer()


def _calculate_simple_subscription_price(params: dict) -> int:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    period_days = params.get("period_days", 30)
    attr_name = f"PRICE_{period_days}_DAYS"
    attr_value = getattr(settings, attr_name, None)

    logger.warning(
        "SIMPLE_SUBSCRIPTION_DEBUG_PRICE_FUNC | period=%s | attr=%s | attr_value=%s | base_price=%s",
        period_days,
        attr_name,
        attr_value,
        settings.BASE_SUBSCRIPTION_PRICE,
    )

    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    if attr_value is not None:
        return attr_value
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
        return settings.BASE_SUBSCRIPTION_PRICE


def _get_simple_subscription_payment_keyboard(language: str) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ç–æ–¥–∞–º–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    texts = get_texts(language)
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
    if settings.TELEGRAM_STARS_ENABLED:
        keyboard.append([types.InlineKeyboardButton(
            text="‚≠ê Telegram Stars",
            callback_data="simple_subscription_stars"
        )])
    
    if settings.is_yookassa_enabled():
        yookassa_methods = []
        if settings.YOOKASSA_SBP_ENABLED:
            yookassa_methods.append(types.InlineKeyboardButton(
                text="üè¶ YooKassa (–°–ë–ü)",
                callback_data="simple_subscription_yookassa_sbp"
            ))
        yookassa_methods.append(types.InlineKeyboardButton(
            text="üí≥ YooKassa (–ö–∞—Ä—Ç–∞)",
            callback_data="simple_subscription_yookassa"
        ))
        if yookassa_methods:
            keyboard.append(yookassa_methods)
    
    if settings.is_cryptobot_enabled():
        keyboard.append([types.InlineKeyboardButton(
            text="ü™ô CryptoBot",
            callback_data="simple_subscription_cryptobot"
        )])
    
    if settings.is_mulenpay_enabled():
        mulenpay_name = settings.get_mulenpay_display_name()
        keyboard.append([types.InlineKeyboardButton(
            text=f"üí≥ {mulenpay_name}",
            callback_data="simple_subscription_mulenpay"
        )])
    
    if settings.is_pal24_enabled():
        keyboard.append([types.InlineKeyboardButton(
            text="üí≥ PayPalych",
            callback_data="simple_subscription_pal24"
        )])
    
    if settings.is_wata_enabled():
        keyboard.append([types.InlineKeyboardButton(
            text="üí≥ WATA",
            callback_data="simple_subscription_wata"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([types.InlineKeyboardButton(
        text=texts.BACK,
        callback_data="subscription_purchase"
    )])
    
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)


@error_handler
async def handle_simple_subscription_pay_with_balance(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession,
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–ª–∞—Ç—É –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —Å –±–∞–ª–∞–Ω—Å–∞."""
    texts = get_texts(db_user.language)
    
    data = await state.get_data()
    subscription_params = data.get("subscription_params", {})
    
    if not subscription_params:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
    price_kopeks = _calculate_simple_subscription_price(subscription_params)
    recorded_price = getattr(settings, f"PRICE_{subscription_params['period_days']}_DAYS", price_kopeks)
    total_required = recorded_price
    extras = []
    traffic_limit = subscription_params.get("traffic_limit_gb", 0)
    if traffic_limit and traffic_limit > 0:
        traffic_price = settings.get_traffic_price(traffic_limit)
        total_required += traffic_price
        extras.append(f"traffic={traffic_limit}GB->{traffic_price}")
    device_limit = subscription_params.get("device_limit", 1)
    if device_limit and device_limit > settings.DEFAULT_DEVICE_LIMIT:
        additional_devices = device_limit - settings.DEFAULT_DEVICE_LIMIT
        devices_price = additional_devices * settings.PRICE_PER_DEVICE
        total_required += devices_price
        extras.append(f"devices+{additional_devices}->{devices_price}")
    logger.warning(
        "SIMPLE_SUBSCRIPTION_DEBUG_PAY_BALANCE | user=%s | period=%s | base_price=%s | extras=%s | total_required=%s | balance=%s",
        db_user.id,
        subscription_params["period_days"],
        price_kopeks,
        ",".join(extras) if extras else "none",
        total_required,
        getattr(db_user, "balance_kopeks", 0),
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_balance_kopeks = getattr(db_user, "balance_kopeks", 0)

    if user_balance_kopeks < total_required:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        return
    
    try:
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from app.database.crud.user import subtract_user_balance
        success = await subtract_user_balance(
            db,
            db_user,
            price_kopeks,
            f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {subscription_params['period_days']} –¥–Ω–µ–π",
            consume_promo_offer=False,
        )
        
        if not success:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ —Å –±–∞–ª–∞–Ω—Å–∞", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞
        from app.database.crud.subscription import get_subscription_by_user_id, extend_subscription
        
        existing_subscription = await get_subscription_by_user_id(db, db_user.id)
        
        if existing_subscription:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ—ë
            subscription = await extend_subscription(
                db=db,
                subscription=existing_subscription,
                days=subscription_params["period_days"]
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
            subscription.traffic_limit_gb = subscription_params["traffic_limit_gb"]
            subscription.device_limit = subscription_params["device_limit"]
            if subscription_params["squad_uuid"]:
                subscription.connected_squads = [subscription_params["squad_uuid"]]
            
            await db.commit()
            await db.refresh(subscription)
        else:
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
            from app.database.crud.subscription import create_paid_subscription
            subscription = await create_paid_subscription(
                db=db,
                user_id=db_user.id,
                duration_days=subscription_params["period_days"],
                traffic_limit_gb=subscription_params["traffic_limit_gb"],
                device_limit=subscription_params["device_limit"],
                connected_squads=[subscription_params["squad_uuid"]] if subscription_params["squad_uuid"] else [],
                update_server_counters=True,
            )
        
        if not subscription:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            from app.services.payment_service import add_user_balance
            await add_user_balance(
                db,
                db_user.id,
                price_kopeks,
                f"–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ—É–¥–∞–≤—à—É—é—Å—è –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {subscription_params['period_days']} –¥–Ω–µ–π",
            )
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.refresh(db_user)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤ RemnaWave
        try:
            from app.services.subscription_service import SubscriptionService
            subscription_service = SubscriptionService()
            remnawave_user = await subscription_service.create_remnawave_user(db, subscription)
            if remnawave_user:
                await db.refresh(subscription)
        except Exception as sync_error:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å RemnaWave –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {db_user.id}: {sync_error}", exc_info=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
        success_message = (
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {subscription_params['period_days']} –¥–Ω–µ–π\n"
            f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {subscription_params['device_limit']}\n"
            f"üìä –¢—Ä–∞—Ñ–∏–∫: {'–ë–µ–∑–ª–∏–º–∏—Ç' if subscription_params['traffic_limit_gb'] == 0 else f'{subscription_params['traffic_limit_gb']} –ì–ë'}\n"
            f"üåç –°–µ—Ä–≤–µ—Ä: {'–õ—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π' if not subscription_params['squad_uuid'] else '–í—ã–±—Ä–∞–Ω–Ω—ã–π'}\n\n"
            f"üí∞ –°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: {settings.format_price(price_kopeks)}\n"
            f"üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: {settings.format_price(db_user.balance_kopeks)}\n\n"
            f"üîó –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'"
        )
        
        connect_mode = settings.CONNECT_BUTTON_MODE
        subscription_link = get_display_subscription_link(subscription)
        connect_button_text = texts.t("CONNECT_BUTTON", "üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")

        def _fallback_connect_button() -> types.InlineKeyboardButton:
            return types.InlineKeyboardButton(
                text=connect_button_text,
                callback_data="subscription_connect",
            )

        if connect_mode == "miniapp_subscription":
            if subscription_link:
                connect_row = [
                    types.InlineKeyboardButton(
                        text=connect_button_text,
                        web_app=types.WebAppInfo(url=subscription_link),
                    )
                ]
            else:
                connect_row = [_fallback_connect_button()]
        elif connect_mode == "miniapp_custom":
            custom_url = settings.MINIAPP_CUSTOM_URL
            if custom_url:
                connect_row = [
                    types.InlineKeyboardButton(
                        text=connect_button_text,
                        web_app=types.WebAppInfo(url=custom_url),
                    )
                ]
            else:
                connect_row = [_fallback_connect_button()]
        elif connect_mode == "link":
            if subscription_link:
                connect_row = [
                    types.InlineKeyboardButton(
                        text=connect_button_text,
                        url=subscription_link,
                    )
                ]
            else:
                connect_row = [_fallback_connect_button()]
        elif connect_mode == "happ_cryptolink":
            if subscription_link:
                connect_row = [
                    types.InlineKeyboardButton(
                        text=connect_button_text,
                        callback_data="open_subscription_link",
                    )
                ]
            else:
                connect_row = [_fallback_connect_button()]
        else:
            connect_row = [_fallback_connect_button()]

        keyboard_rows = [connect_row]

        happ_row = get_happ_download_button_row(texts)
        if happ_row:
            keyboard_rows.append(happ_row)

        keyboard_rows.append(
            [types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        )

        keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

        await callback.message.edit_text(
            success_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        try:
            from app.services.admin_notification_service import AdminNotificationService
            notification_service = AdminNotificationService(callback.bot)
            await notification_service.send_subscription_purchase_notification(
                db,
                db_user,
                subscription,
                None,  # transaction
                subscription_params["period_days"],
                False,  # was_trial_conversion
                amount_kopeks=price_kopeks,
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –ø–æ–∫—É–ø–∫–µ: {e}")
        
        await state.clear()
        await callback.answer()

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.telegram_id} —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª –ø–æ–¥–ø–∏—Å–∫—É —Å –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {price_kopeks/100}‚ÇΩ")

    except Exception as error:
        logger.error(
            "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
            db_user.id,
            error,
            exc_info=True,
        )
        await callback.answer(
            "‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            show_alert=True,
        )
        await state.clear()


@error_handler
async def handle_simple_subscription_pay_with_balance_disabled(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession,
):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä—è–º–æ–π –æ–ø–ª–∞—Ç—ã."""
    await callback.answer(
        "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
        show_alert=True,
    )


@error_handler
async def handle_simple_subscription_other_payment_methods(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession,
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥—Ä—É–≥–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã."""
    texts = get_texts(db_user.language)
    
    data = await state.get_data()
    subscription_params = data.get("subscription_params", {})
    
    if not subscription_params:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
    price_kopeks = _calculate_simple_subscription_price(subscription_params)
    
    user_balance_kopeks = getattr(db_user, "balance_kopeks", 0)
    recorded_price = getattr(settings, f"PRICE_{subscription_params['period_days']}_DAYS", price_kopeks)
    total_required = recorded_price
    if subscription_params.get("traffic_limit_gb", 0) > 0:
        total_required += settings.get_traffic_price(subscription_params["traffic_limit_gb"])
    if subscription_params.get("device_limit", 1) > settings.DEFAULT_DEVICE_LIMIT:
        additional_devices = subscription_params["device_limit"] - settings.DEFAULT_DEVICE_LIMIT
        total_required += additional_devices * settings.PRICE_PER_DEVICE
    can_pay_from_balance = user_balance_kopeks >= total_required
    logger.warning(
        "SIMPLE_SUBSCRIPTION_DEBUG_METHODS | user=%s | balance=%s | base_price=%s | total_required=%s | can_pay=%s",
        db_user.id,
        user_balance_kopeks,
        price_kopeks,
        total_required,
        can_pay_from_balance,
    )

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
    message_text = (
        f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        f"üìÖ –ü–µ—Ä–∏–æ–¥: {subscription_params['period_days']} –¥–Ω–µ–π\n"
        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {subscription_params['device_limit']}\n"
        f"üìä –¢—Ä–∞—Ñ–∏–∫: {'–ë–µ–∑–ª–∏–º–∏—Ç' if subscription_params['traffic_limit_gb'] == 0 else f'{subscription_params['traffic_limit_gb']} –ì–ë'}\n"
        f"üåç –°–µ—Ä–≤–µ—Ä: {'–õ—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π' if not subscription_params['squad_uuid'] else '–í—ã–±—Ä–∞–Ω–Ω—ã–π'}\n\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {settings.format_price(price_kopeks)}\n\n"
        + (
            "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å –±–∞–ª–∞–Ω—Å–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
            if can_pay_from_balance
            else "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
        )
    )
    
    base_keyboard = _get_simple_subscription_payment_keyboard(db_user.language)
    keyboard_rows = []
    
    if can_pay_from_balance:
        keyboard_rows.append([
            types.InlineKeyboardButton(
                text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞",
                callback_data="simple_subscription_pay_with_balance"
            )
        ])
    
    keyboard_rows.extend(base_keyboard.inline_keyboard)
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    await callback.answer()


@error_handler
async def handle_simple_subscription_payment_method(
    callback: types.CallbackQuery,
    db_user: User,
    state: FSMContext,
    db: AsyncSession,
):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    texts = get_texts(db_user.language)
    
    data = await state.get_data()
    subscription_params = data.get("subscription_params", {})
    
    if not subscription_params:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å—Ç–∞—Ä–µ–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", show_alert=True)
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏
    price_kopeks = _calculate_simple_subscription_price(subscription_params)
    
    payment_method = callback.data.replace("simple_subscription_", "")
    
    try:
        payment_service = PaymentService(callback.bot)
        
        if payment_method == "stars":
            # –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars
            stars_count = settings.rubles_to_stars(settings.kopeks_to_rubles(price_kopeks))
            
            await callback.bot.send_invoice(
                chat_id=callback.from_user.id,
                title=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {subscription_params['period_days']} –¥–Ω–µ–π",
                description=(
                    f"–ü—Ä–æ—Å—Ç–∞—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n"
                    f"–ü–µ—Ä–∏–æ–¥: {subscription_params['period_days']} –¥–Ω–µ–π\n"
                    f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {subscription_params['device_limit']}\n"
                    f"–¢—Ä–∞—Ñ–∏–∫: {'–ë–µ–∑–ª–∏–º–∏—Ç' if subscription_params['traffic_limit_gb'] == 0 else f'{subscription_params['traffic_limit_gb']} –ì–ë'}"
                ),
                payload=f"simple_sub_{db_user.id}_{subscription_params['period_days']}",
                provider_token="",  # –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è Telegram Stars
                currency="XTR",  # Telegram Stars
                prices=[types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=stars_count)]
            )
            
            await state.clear()
            await callback.answer()
            
        elif payment_method in ["yookassa", "yookassa_sbp"]:
            # –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooKassa
            if not settings.is_yookassa_enabled():
                await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ YooKassa –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
                return
            
            if payment_method == "yookassa_sbp" and not settings.YOOKASSA_SBP_ENABLED:
                await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
            purchase_service = SubscriptionPurchaseService()
            
            order = await purchase_service.create_subscription_order(
                db=db,
                user_id=db_user.id,
                period_days=subscription_params["period_days"],
                device_limit=subscription_params["device_limit"],
                traffic_limit_gb=subscription_params["traffic_limit_gb"],
                squad_uuid=subscription_params["squad_uuid"],
                payment_method="yookassa_sbp" if payment_method == "yookassa_sbp" else "yookassa",
                total_price_kopeks=price_kopeks
            )
            
            if not order:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", show_alert=True)
                return
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ YooKassa
            if payment_method == "yookassa_sbp":
                payment_result = await payment_service.create_yookassa_sbp_payment(
                    db=db,
                    user_id=db_user.id,
                    amount_kopeks=price_kopeks,
                    description=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {subscription_params['period_days']} –¥–Ω–µ–π",
                    receipt_email=db_user.email if hasattr(db_user, 'email') and db_user.email else None,
                    receipt_phone=db_user.phone if hasattr(db_user, 'phone') and db_user.phone else None,
                    metadata={
                        "user_telegram_id": str(db_user.telegram_id),
                        "user_username": db_user.username or "",
                        "order_id": str(order.id),
                        "subscription_period": str(subscription_params["period_days"]),
                        "payment_purpose": "simple_subscription_purchase"
                    }
                )
            else:
                payment_result = await payment_service.create_yookassa_payment(
                    db=db,
                    user_id=db_user.id,
                    amount_kopeks=price_kopeks,
                    description=f"–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {subscription_params['period_days']} –¥–Ω–µ–π",
                    receipt_email=db_user.email if hasattr(db_user, 'email') and db_user.email else None,
                    receipt_phone=db_user.phone if hasattr(db_user, 'phone') and db_user.phone else None,
                    metadata={
                        "user_telegram_id": str(db_user.telegram_id),
                        "user_username": db_user.username or "",
                        "order_id": str(order.id),
                        "subscription_period": str(subscription_params["period_days"]),
                        "payment_purpose": "simple_subscription_purchase"
                    }
                )
            
            if not payment_result:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –∏/–∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
            confirmation_url = payment_result.get("confirmation_url")
            qr_confirmation_data = payment_result.get("qr_confirmation_data")
            
            if not confirmation_url and not qr_confirmation_data:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã", show_alert=True)
                return
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º QR-–∫–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            qr_photo = None
            if qr_confirmation_data or confirmation_url:
                try:
                    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞
                    import base64
                    from io import BytesIO
                    import qrcode
                    from aiogram.types import BufferedInputFile
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º qr_confirmation_data –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ, –∏–Ω–∞—á–µ confirmation_url
                    qr_data = qr_confirmation_data if qr_confirmation_data else confirmation_url
                    
                    # –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    qr = qrcode.QRCode(version=1, box_size=10, border=5)
                    qr.add_data(qr_data)
                    qr.make(fit=True)
                    
                    img = qr.make_image(fill_color="black", back_color="white")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
                    img_bytes = BytesIO()
                    img.save(img_bytes, format='PNG')
                    img_bytes.seek(0)
                    
                    qr_photo = BufferedInputFile(img_bytes.getvalue(), filename="qrcode.png")
                except ImportError:
                    logger.warning("qrcode –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, QR-–∫–æ–¥ –Ω–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            keyboard_buttons = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Å—Å—ã–ª–∫–∞
            if confirmation_url:
                keyboard_buttons.append([types.InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=confirmation_url)])
            else:
                # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞
                keyboard_buttons.append([types.InlineKeyboardButton(text="üì± –û–ø–ª–∞—Ç–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞", callback_data="temp_disabled")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
            keyboard_buttons.append([types.InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"check_yookassa_{payment_result['local_payment_id']}")])
            keyboard_buttons.append([types.InlineKeyboardButton(text=texts.BACK, callback_data="subscription_purchase")])
            
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = (
                f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ YooKassa</b>\n\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {subscription_params['period_days']} –¥–Ω–µ–π\n"
                f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {subscription_params['device_limit']}\n"
                f"üìä –¢—Ä–∞—Ñ–∏–∫: {'–ë–µ–∑–ª–∏–º–∏—Ç' if subscription_params['traffic_limit_gb'] == 0 else f'{subscription_params['traffic_limit_gb']} –ì–ë'}\n"
                f"üí∞ –°—É–º–º–∞: {settings.format_price(price_kopeks)}\n"
                f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_result['yookassa_payment_id'][:8]}...\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
            if not confirmation_url:
                message_text += (
                    f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:</b>\n"
                    f"1. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞\n"
                    f"2. –ù–∞–π–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –æ–ø–ª–∞—Ç—ã –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –°–ë–ü\n"
                    f"3. –í–≤–µ–¥–∏—Ç–µ ID –ø–ª–∞—Ç–µ–∂–∞: <code>{payment_result['yookassa_payment_id']}</code>\n"
                    f"4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞\n"
                    f"5. –î–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                )
            
            message_text += (
                f"üîí –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É YooKassa\n"
                f"‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç—ã: Visa, MasterCard, –ú–ò–†\n\n"
                f"‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ {settings.get_support_contact_display_html()}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            # –ï—Å–ª–∏ –µ—Å—Ç—å QR-–∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ
            if qr_photo:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                await callback.message.edit_media(
                    media=types.InputMediaPhoto(
                        media=qr_photo,
                        caption=message_text,
                        parse_mode="HTML"
                    ),
                    reply_markup=keyboard
                )
            else:
                # –ï—Å–ª–∏ QR-–∫–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.edit_text(
                    message_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            
            await state.clear()
            await callback.answer()
            
        elif payment_method == "cryptobot":
            # –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot
            if not settings.is_cryptobot_enabled():
                await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
                return
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot
            await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", show_alert=True)
            
        elif payment_method == "mulenpay":
            # –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ MulenPay
            mulenpay_name = settings.get_mulenpay_display_name()
            if not settings.is_mulenpay_enabled():
                await callback.answer(
                    f"‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {mulenpay_name} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                    show_alert=True,
                )
                return

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ MulenPay
            await callback.answer(
                f"‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ {mulenpay_name} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞",
                show_alert=True,
            )
            
        elif payment_method == "pal24":
            # –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ PayPalych
            if not settings.is_pal24_enabled():
                await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ PayPalych –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
                return
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ PayPalych
            await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ PayPalych –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", show_alert=True)
            
        elif payment_method == "wata":
            # –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ WATA
            if not settings.is_wata_enabled():
                await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ WATA –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", show_alert=True)
                return
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ WATA
            await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ WATA –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", show_alert=True)
            
        else:
            await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", show_alert=True)
        await state.clear()


def register_simple_subscription_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."""
    
    dp.callback_query.register(
        start_simple_subscription_purchase,
        F.data == "simple_subscription_purchase"
    )
    
    dp.callback_query.register(
        handle_simple_subscription_pay_with_balance,
        F.data == "simple_subscription_pay_with_balance"
    )
    
    dp.callback_query.register(
        handle_simple_subscription_pay_with_balance_disabled,
        F.data == "simple_subscription_pay_with_balance_disabled"
    )
    
    dp.callback_query.register(
        handle_simple_subscription_other_payment_methods,
        F.data == "simple_subscription_other_payment_methods"
    )
    
    dp.callback_query.register(
        handle_simple_subscription_payment_method,
        F.data.startswith("simple_subscription_")
    )
