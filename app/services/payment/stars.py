"""–õ–æ–≥–∏–∫–∞ Telegram Stars –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π mixin.

–ú–µ—Ç–æ–¥—ã –∑–¥–µ—Å—å –æ—Ç–≤–µ—á–∞—é—Ç —Ç–æ–ª—å–∫–æ –∑–∞ —Ä–∞–±–æ—Ç—É —Å –∑–≤—ë–∑–¥–∞–º–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–µ—Ä–∂–∞—Ç—å
–æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º –∏ –æ–±–ª–µ–≥—á–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤.
"""

from __future__ import annotations

import logging
from datetime import datetime
from decimal import Decimal, ROUND_FLOOR, ROUND_HALF_UP
from typing import Optional

from aiogram.types import LabeledPrice
from sqlalchemy.ext.asyncio import AsyncSession

from app.config import settings
from app.database.crud.transaction import create_transaction
from app.database.crud.user import get_user_by_id
from app.database.models import PaymentMethod, TransactionType
from app.external.telegram_stars import TelegramStarsService
from app.services.subscription_auto_purchase_service import (
    auto_purchase_saved_cart_after_topup,
    get_saved_cart_total_kopeks,
)
from app.utils.user_utils import format_referrer_info

logger = logging.getLogger(__name__)


class TelegramStarsMixin:
    """Mixin —Å –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ Telegram Stars."""

    async def create_stars_invoice(
        self,
        amount_kopeks: int,
        description: str,
        payload: Optional[str] = None,
        *,
        stars_amount: Optional[int] = None,
    ) -> str:
        """–°–æ–∑–¥–∞—ë—Ç invoice –≤ Telegram Stars, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥."""
        if not self.bot or not getattr(self, "stars_service", None):
            raise ValueError("Bot instance required for Stars payments")

        try:
            amount_rubles = Decimal(amount_kopeks) / Decimal(100)

            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –Ω–µ –∑–∞–¥–∞–Ω–æ, –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ –∏–∑ –∫—É—Ä—Å–∞.
            if stars_amount is None:
                rate = Decimal(str(settings.get_stars_rate()))
                if rate <= 0:
                    raise ValueError("Stars rate must be positive")

                normalized_stars = (amount_rubles / rate).to_integral_value(
                    rounding=ROUND_FLOOR
                )
                stars_amount = int(normalized_stars) or 1

            if stars_amount <= 0:
                raise ValueError("Stars amount must be positive")

            invoice_link = await self.bot.create_invoice_link(
                title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ VPN",
                description=f"{description} (‚âà{stars_amount} ‚≠ê)",
                payload=payload or f"balance_topup_{amount_kopeks}",
                provider_token="",
                currency="XTR",
                prices=[LabeledPrice(label="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", amount=stars_amount)],
            )

            logger.info(
                "–°–æ–∑–¥–∞–Ω Stars invoice –Ω–∞ %s –∑–≤–µ–∑–¥ (~%s)",
                stars_amount,
                settings.format_price(amount_kopeks),
            )
            return invoice_link

        except Exception as error:
            logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Stars invoice: %s", error)
            raise

    async def process_stars_payment(
        self,
        db: AsyncSession,
        user_id: int,
        stars_amount: int,
        payload: str,
        telegram_payment_charge_id: str,
    ) -> bool:
        """–§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–ª–∞—Ç–µ–∂, –ø—Ä–∏—à–µ–¥—à–∏–π –∏–∑ Telegram Stars, –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        del payload  # payload –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        try:
            rubles_amount = TelegramStarsService.calculate_rubles_from_stars(
                stars_amount
            )
            amount_kopeks = int(
                (rubles_amount * Decimal(100)).to_integral_value(
                    rounding=ROUND_HALF_UP
                )
            )

            transaction = await create_transaction(
                db=db,
                user_id=user_id,
                type=TransactionType.DEPOSIT,
                amount_kopeks=amount_kopeks,
                description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars ({stars_amount} ‚≠ê)",
                payment_method=PaymentMethod.TELEGRAM_STARS,
                external_id=telegram_payment_charge_id,
                is_completed=True,
            )

            user = await get_user_by_id(db, user_id)
            if not user:
                logger.error(
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID %s –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Stars –ø–ª–∞—Ç–µ–∂–∞",
                    user_id,
                )
                return False

            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
            old_balance = user.balance_kopeks
            was_first_topup = not user.has_made_first_topup

            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –ë–î.
            user.balance_kopeks += amount_kopeks
            user.updated_at = datetime.utcnow()

            promo_group = getattr(user, "promo_group", None)
            subscription = getattr(user, "subscription", None)
            referrer_info = format_referrer_info(user)
            topup_status = (
                "üÜï –ü–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if was_first_topup else "üîÑ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
            )

            await db.commit()

            description_for_referral = (
                f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Stars: {settings.format_price(amount_kopeks)} ({stars_amount} ‚≠ê)"
            )
            logger.info(
                "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è: '%s'",
                description_for_referral,
            )

            lower_description = description_for_referral.lower()
            contains_allowed_keywords = any(
                word in lower_description
                for word in ["–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ", "stars", "yookassa", "topup"]
            )
            contains_forbidden_keywords = any(
                word in lower_description for word in ["–∫–æ–º–∏—Å—Å–∏—è", "–±–æ–Ω—É—Å"]
            )
            allow_referral = contains_allowed_keywords and not contains_forbidden_keywords

            if allow_referral:
                logger.info(
                    "üîû –í—ã–∑–æ–≤ process_referral_topup –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s",
                    user_id,
                )
                try:
                    from app.services.referral_service import process_referral_topup

                    await process_referral_topup(
                        db, user_id, amount_kopeks, getattr(self, "bot", None)
                    )
                except Exception as error:
                    logger.error(
                        "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: %s", error
                    )
            else:
                logger.info(
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ '%s' –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏",
                    description_for_referral,
                )

            if was_first_topup and not user.has_made_first_topup:
                user.has_made_first_topup = True
                await db.commit()

            await db.refresh(user)

            logger.info(
                "üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s –∏–∑–º–µ–Ω–µ–Ω: %s ‚Üí %s (Œî +%s)",
                user.telegram_id,
                old_balance,
                user.balance_kopeks,
                amount_kopeks,
            )

            if getattr(self, "bot", None):
                try:
                    from app.services.admin_notification_service import (
                        AdminNotificationService,
                    )

                    notification_service = AdminNotificationService(self.bot)
                    await notification_service.send_balance_topup_notification(
                        user,
                        transaction,
                        old_balance,
                        topup_status=topup_status,
                        referrer_info=referrer_info,
                        subscription=subscription,
                        promo_group=promo_group,
                        db=db,
                    )
                except Exception as error:
                    logger.error(
                        "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ Stars: %s",
                        error,
                        exc_info=True
                    )

            if getattr(self, "bot", None):
                try:
                    keyboard = await self.build_topup_success_keyboard(user)

                    await self.bot.send_message(
                        user.telegram_id,
                        (
                            "‚úÖ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                            f"‚≠ê –ó–≤–µ–∑–¥: {stars_amount}\n"
                            f"üí∞ –°—É–º–º–∞: {settings.format_price(amount_kopeks)}\n"
                            "ü¶ä –°–ø–æ—Å–æ–±: Telegram Stars\n"
                            f"üÜî –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {telegram_payment_charge_id[:8]}...\n\n"
                            "–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
                        ),
                        parse_mode="HTML",
                        reply_markup=keyboard,
                    )
                    logger.info(
                        "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–∞ %s",
                        user.telegram_id,
                        settings.format_price(amount_kopeks),
                    )
                except Exception as error:
                    logger.error(
                        "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ Stars: %s",
                        error,
                    )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏
            try:
                from app.services.user_cart_service import user_cart_service
                from aiogram import types
                has_saved_cart = await user_cart_service.has_user_cart(user.id)
                auto_purchase_success = False
                if has_saved_cart:
                    try:
                        auto_purchase_success = await auto_purchase_saved_cart_after_topup(
                            db,
                            user,
                            bot=getattr(self, "bot", None),
                        )
                    except Exception as auto_error:
                        logger.error(
                            "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s",
                            user.id,
                            auto_error,
                            exc_info=True,
                        )

                    if auto_purchase_success:
                        has_saved_cart = False

                if has_saved_cart and getattr(self, "bot", None):
                    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞,
                    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é
                    from app.localization.texts import get_texts

                    texts = get_texts(user.language)
                    cart_data = await user_cart_service.get_user_cart(user.id)
                    cart_total = get_saved_cart_total_kopeks(
                        cart_data, getattr(user, "balance_kopeks", None)
                    )

                    total_amount_label = (
                        texts.format_price(cart_total)
                        if cart_total
                        else settings.format_price(amount_kopeks)
                    )

                    cart_message = texts.t(
                        "BALANCE_TOPUP_CART_REMINDER_DETAILED",
                        "üõí –£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑.\n\n"
                        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."
                    ).format(total_amount=total_amount_label)

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(
                            text=texts.RETURN_TO_SUBSCRIPTION_CHECKOUT,
                            callback_data="subscription_resume_checkout"
                        )],
                        [types.InlineKeyboardButton(
                            text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å",
                            callback_data="menu_balance"
                        )],
                        [types.InlineKeyboardButton(
                            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="back_to_menu"
                        )]
                    ])
                    
                    await self.bot.send_message(
                        chat_id=user.telegram_id,
                        text=f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {settings.format_price(amount_kopeks)}!\n\n{cart_message}",
                        reply_markup=keyboard
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}", exc_info=True)

            logger.info(
                "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω Stars –ø–ª–∞—Ç–µ–∂: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s, %s –∑–≤–µ–∑–¥ ‚Üí %s",
                user_id,
                stars_amount,
                settings.format_price(amount_kopeks),
            )
            return True

        except Exception as error:
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stars –ø–ª–∞—Ç–µ–∂–∞: %s", error, exc_info=True)
            return False
