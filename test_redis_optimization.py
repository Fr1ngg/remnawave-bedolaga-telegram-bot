#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π Redis
"""

import asyncio
import time
import logging
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_redis_performance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Redis"""
    
    try:
        from app.services.redis_service import redis_service
        from app.services.redis_health_check import redis_health_checker
        
        print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π Redis...")
        
        # 1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        print("\n1. –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        start_time = time.time()
        connected = await redis_service.connect()
        connect_time = time.time() - start_time
        
        if connected:
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞ {connect_time:.3f}s")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            return
        
        # 2. –¢–µ—Å—Ç ping
        print("\n2. –¢–µ—Å—Ç ping...")
        start_time = time.time()
        ping_ok = await redis_service.ping()
        ping_time = time.time() - start_time
        
        if ping_ok:
            print(f"‚úÖ Ping —É—Å–ø–µ—à–µ–Ω –∑–∞ {ping_time:.3f}s")
        else:
            print("‚ùå Ping –Ω–µ —É–¥–∞–ª—Å—è")
        
        # 3. –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
        print("\n3. –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è...")
        test_data = {"test": "data", "number": 123, "list": [1, 2, 3]}
        
        # –ó–∞–ø–∏—Å—å
        start_time = time.time()
        write_ok = await redis_service.set("test_key", str(test_data), expire=60)
        write_time = time.time() - start_time
        
        if write_ok:
            print(f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞ –∑–∞ {write_time:.3f}s")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏")
        
        # –ß—Ç–µ–Ω–∏–µ
        start_time = time.time()
        read_data = await redis_service.get("test_key")
        read_time = time.time() - start_time
        
        if read_data:
            print(f"‚úÖ –ß—Ç–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞ {read_time:.3f}s")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è")
        
        # 4. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
        print("\n4. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        operations = 100
        start_time = time.time()
        
        for i in range(operations):
            await redis_service.set(f"perf_test_{i}", f"value_{i}", expire=60)
        
        for i in range(operations):
            await redis_service.get(f"perf_test_{i}")
        
        total_time = time.time() - start_time
        ops_per_sec = (operations * 2) / total_time
        
        print(f"‚úÖ {operations * 2} –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {total_time:.3f}s ({ops_per_sec:.1f} ops/sec)")
        
        # 5. –¢–µ—Å—Ç health check
        print("\n5. –¢–µ—Å—Ç health check...")
        start_time = time.time()
        health_info = await redis_health_checker.check_health()
        health_time = time.time() - start_time
        
        print(f"‚úÖ Health check –∑–∞ {health_time:.3f}s")
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'–ó–¥–æ—Ä–æ–≤' if health_info.get('is_healthy') else '–ü—Ä–æ–±–ª–µ–º—ã'}")
        print(f"   –ö–ª–∏–µ–Ω—Ç—ã: {health_info.get('connected_clients', 0)}")
        print(f"   –ü–∞–º—è—Ç—å: {health_info.get('memory_usage_human', '0B')}")
        print(f"   Hit Rate: {health_info.get('hit_rate', 0):.1f}%")
        
        # 6. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\n6. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats = await redis_service.get_stats()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
        print(f"   –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats.get('connected_clients', 0)}")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {stats.get('used_memory', '0B')}")
        print(f"   –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {stats.get('instantaneous_ops_per_sec', 0)}")
        print(f"   –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {stats.get('total_commands_processed', 0)}")
        
        # 7. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print("\n7. –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        for i in range(operations):
            await redis_service.delete(f"perf_test_{i}")
        await redis_service.delete("test_key")
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        # 8. –¢–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        print("\n8. –¢–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è...")
        await redis_service.disconnect()
        print("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.exception("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis")

async def test_cache_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à-—Å–µ—Ä–≤–∏—Å–∞"""
    
    try:
        from app.utils.cache import cache
        
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–µ—à-—Å–µ—Ä–≤–∏—Å–∞...")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await cache.connect()
        print("‚úÖ –ö–µ—à-—Å–µ—Ä–≤–∏—Å –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
        test_data = {"user_id": 123, "name": "Test User", "active": True}
        
        # –ó–∞–ø–∏—Å—å
        write_ok = await cache.set("user:123", test_data, expire=300)
        if write_ok:
            print("‚úÖ –ó–∞–ø–∏—Å—å –≤ –∫–µ—à —É—Å–ø–µ—à–Ω–∞")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –∫–µ—à")
        
        # –ß—Ç–µ–Ω–∏–µ
        read_data = await cache.get("user:123")
        if read_data == test_data:
            print("‚úÖ –ß—Ç–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞")
        
        # –¢–µ—Å—Ç —Ö–µ—à–∞
        hash_data = {"field1": "value1", "field2": "value2"}
        hash_ok = await cache.set_hash("test_hash", hash_data, expire=300)
        if hash_ok:
            print("‚úÖ –ó–∞–ø–∏—Å—å —Ö–µ—à–∞ —É—Å–ø–µ—à–Ω–∞")
        
        read_hash = await cache.get_hash("test_hash")
        if read_hash == hash_data:
            print("‚úÖ –ß—Ç–µ–Ω–∏–µ —Ö–µ—à–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –û—á–∏—Å—Ç–∫–∞
        await cache.delete("user:123")
        await cache.delete("test_hash")
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
        await cache.disconnect()
        print("‚úÖ –ö–µ—à-—Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–µ—à-—Å–µ—Ä–≤–∏—Å–∞: {e}")
        logger.exception("–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–µ—à-—Å–µ—Ä–≤–∏—Å–∞")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π Redis –¥–ª—è Telegram –±–æ—Ç–∞")
    print("=" * 60)
    
    # –¢–µ—Å—Ç Redis —Å–µ—Ä–≤–∏—Å–∞
    await test_redis_performance()
    
    # –¢–µ—Å—Ç –∫–µ—à-—Å–µ—Ä–≤–∏—Å–∞
    await test_cache_service()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
